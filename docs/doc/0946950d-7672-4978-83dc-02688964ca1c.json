{
    "summary": "The code provides game shopkeeper interaction skills using mouse actions and pydirectinput for keyboard inputs, including functions for product selection.",
    "details": [
        {
            "comment": "This code defines skills for interacting with a shopkeeper and selecting items in a game using mouse actions. The \"shopkeeper_interaction\" skill initiates interaction by long-pressing the right mouse button, while \"cancel_shopkeeper_interaction\" cancels the interaction by releasing the button. The \"mouse_select_item\" skill moves the mouse to a specific location to select an item in the game. All skills include post-action wait time using config.DEFAULT_POST_ACTION_WAIT_TIME.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/atomic_skills/trade_utils.py\":0-33",
            "content": "from cradle.config import Config\nfrom cradle.gameio import IOEnvironment\nfrom cradle.gameio.skill_registry import register_skill, post_skill_wait\nconfig = Config()\nio_env = IOEnvironment()\n@register_skill(\"shopkeeper_interaction\")\ndef shopkeeper_interaction():\n    \"\"\"\n    Initiates interaction with the shopkeeper by long-pressing the right mouse button.\n    This action opens the transaction menu.\n    Note: The transaction type must be determined and the interaction closed afterward.\n    \"\"\"\n    io_env.mouse_hold_button(button=io_env.RIGHT_MOUSE_BUTTON)\n    post_skill_wait(config.DEFAULT_POST_ACTION_WAIT_TIME)\n@register_skill(\"cancel_shopkeeper_interaction\")\ndef cancel_shopkeeper_interaction():\n    \"\"\"\n    Cancels the interaction with the shopkeeper by releasing the right mouse button.\n    \"\"\"\n    io_env.mouse_release_button(button=io_env.RIGHT_MOUSE_BUTTON)\n    post_skill_wait(config.DEFAULT_POST_ACTION_WAIT_TIME)\n@register_skill(\"mouse_select_item\")\ndef mouse_select_item(x, y):\n    \"\"\"\n    Move the mouse to a specific location to select the item in the game."
        },
        {
            "comment": "The code includes functions for interacting with the game interface using input commands. The \"mouse_confirm_item\" function clicks the left mouse button to confirm a selection, while \"go_back\" function presses the \"esc\" key to return to the previous level. The \"select_upside_product\" and \"select_downside_product\" functions use the \"up\" and \"down\" keys to navigate product listings.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/atomic_skills/trade_utils.py\":34-71",
            "content": "    Parameters:\n    - x: The normalized abscissa of the pixel.\n    - y: The normalized ordinate of the pixel.\n    \"\"\"\n    io_env.mouse_move_normalized(x, y)\n@register_skill(\"mouse_confirm_item\")\ndef mouse_confirm_item():\n    \"\"\"\n    Confirms the selection item by clicking the left mouse button once.\n    \"\"\"\n    io_env.mouse_click_button(button=io_env.LEFT_MOUSE_BUTTON)\n@register_skill(\"go_back\")\ndef go_back():\n    \"\"\"\n    Returns to the upper level by pressing the \"esc\" key.\n    \"\"\"\n    io_env.key_press('esc')\n    post_skill_wait(config.DEFAULT_POST_ACTION_WAIT_TIME)\n@register_skill(\"select_upside_product\")\ndef select_upside_product():\n    \"\"\"\n    This function simulates the action of selecting the product on the next upside of the current selected product.\n    It uses the pydirectinput library to press the \"up\" key.\n    \"\"\"\n    io_env.key_press('up')\n@register_skill(\"select_downside_product\")\ndef select_downside_product():\n    \"\"\"\n    This function simulates the action of selecting the product on the next downside of the current selected product."
        },
        {
            "comment": "This code utilizes the pydirectinput library to simulate user keyboard inputs for selecting products in a game. The functions \"select_leftside_product\", \"select_rightside_product\", and \"select_next_product\" enable navigation through product options using the 'left', 'right', and 'down' keys, respectively.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/atomic_skills/trade_utils.py\":72-106",
            "content": "    It uses the pydirectinput library to press the \"down\" key.\n    \"\"\"\n    io_env.key_press('down')\n@register_skill(\"select_leftside_product\")\ndef select_leftside_product():\n    \"\"\"\n    This function simulates the action of selecting the product on the next leftside of the current selected product.\n    It uses the pydirectinput library to press the \"left\" key.\n    \"\"\"\n    io_env.key_press('left')\n@register_skill(\"select_rightside_product\")\ndef select_rightside_product():\n    \"\"\"\n    This function simulates the action of selecting the product on the next rightside of the current selected product.\n    It uses the pydirectinput library to press the \"right\" key.\n    \"\"\"\n    io_env.key_press('right')\n@register_skill(\"select_next_product\")\ndef select_next_product():\n    \"\"\"\n    This function simulates the action of selecting the next product of the current selected product.\n    It uses the pydirectinput library to press the \"right\" key.\n    \"\"\"\n    io_env.key_press('right')\n__all__ = [\n    \"shopkeeper_interaction\",\n    \"cancel_shopkeeper_interaction\","
        },
        {
            "comment": "These lines define four different product selection functions: \"select_upside_product\", \"select_downside_product\", \"select_leftside_product\", and \"select_rightside_product\". Each function likely selects a specific product based on certain conditions or parameters, such as direction or side.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/atomic_skills/trade_utils.py\":107-111",
            "content": "    \"select_upside_product\",\n    \"select_downside_product\",\n    \"select_leftside_product\",\n    \"select_rightside_product\",\n]"
        }
    ]
}