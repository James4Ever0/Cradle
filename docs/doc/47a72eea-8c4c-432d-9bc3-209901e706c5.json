{
    "summary": "This code is for a game AI system that automatically targets and shoots enemies in shooting games. It uses screenshots, target detection, angle adjustment, area sorting, and filters unnecessary boxes. It detects targets, shoots if detected, follows a red circle, saves annotated images, logs coordinates with post-wait time, and uses action identifiers for various targets.",
    "details": [
        {
            "comment": "The code is part of a game AI system, likely designed for shooting targets like people or wolves. It imports necessary libraries and registers the \"shoot_people\" skill in the skill registry. The function shoot_people() is responsible for shooting at person-shaped targets if necessary. The code uses various functions from different modules to achieve this task, such as loading models, taking screenshots, aiming, and shooting. It also has a maximum number of shooting iterations and continues shooting even without enemies after a certain frequency.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/composite_skills/auto_shoot.py\":0-33",
            "content": "import os\nimport time\nimport numpy as np\nimport cv2\nimport torch\nfrom torchvision.ops import box_convert\nfrom groundingdino.util.inference import load_model, load_image, predict, annotate\nfrom cradle.gameio.lifecycle.ui_control import take_screenshot, CircleDetector, unpause_game,pause_game\nfrom cradle.gameio.atomic_skills.combat import aim, shoot\nfrom cradle.gameio.lifecycle.ui_control import switch_to_game, take_screenshot\nfrom cradle.gameio.atomic_skills.move import turn, move_forward\nfrom cradle.gameio.skill_registry import register_skill\nfrom cradle.provider import GdProvider\nfrom cradle.config import Config\nfrom cradle.log import Logger\nfrom cradle.gameio import IOEnvironment\nconfig = Config()\nlogger = Logger()\nio_env = IOEnvironment()\ngd_detector = GdProvider()\nDEFAULT_MAX_SHOOTING_ITERATIONS = 100\nSHOOT_PEOPLE_TARGET_NAME = \"person\"\nSHOOT_WOLVES_TARGET_NAME = \"wolf\"\nCONTINUE_NO_ENEMY_FREQ = 5\n@register_skill(\"shoot_people\")\ndef shoot_people():\n    \"\"\"\n    Shoot at person-shaped targets, if necessary.\n    \"\"\""
        },
        {
            "comment": "The code defines a function \"keep_shooting_target\" that automatically shoots at detected targets for a specified number of iterations. It also includes a function \"shoot_wolves\" which utilizes the keep_shooting_target function to target and shoot wolves specifically. The code initializes variables, logs progress and debug information, and disables OCR if the text is different from the previous one.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/composite_skills/auto_shoot.py\":34-69",
            "content": "    keep_shooting_target(DEFAULT_MAX_SHOOTING_ITERATIONS, detect_target=SHOOT_PEOPLE_TARGET_NAME, debug=False)\n@register_skill(\"shoot_wolves\")\ndef shoot_wolves():\n    \"\"\"\n    Shoot at wolf targets, if necessary.\n    \"\"\"\n    keep_shooting_target(DEFAULT_MAX_SHOOTING_ITERATIONS, detect_target=SHOOT_WOLVES_TARGET_NAME, debug=False)\ndef keep_shooting_target(\n        iterations,\n        detect_target=\"wolf\",\n        debug=True\n):\n    '''\n    Keep shooting the 'detect_target' detected by object detector automatically.\n    '''\n    POST_WAIT_TIME = 0.1\n    save_dir = config.work_dir\n    circle_detector = CircleDetector(config.resolution_ratio)\n    aim()  # aim before detection\n    terminal_flags = []\n    for step in range(1, 1 + iterations):\n        if debug:\n            logger.debug(f'Go into combat #{step}')\n        if config.ocr_different_previous_text:\n            logger.write(\"The text is different from the previous one.\")\n            config.ocr_enabled = False # disable ocr\n            config.ocr_different_previous_text = False # reset"
        },
        {
            "comment": "This code takes a screenshot of the game screen and minimap, checks if the pointer is over a red area, detects targets and enemies using object detection, and determines the target's direction for aiming. If an enemy is detected, it aims at the enemy within a specified angle range and continues the loop.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/composite_skills/auto_shoot.py\":70-96",
            "content": "            break\n        timestep = time.time()\n        screen_image_filename, minimap_image_filename = take_screenshot(timestep, config.game_region, config.minimap_region, draw_axis=False)\n        screen = cv2.imread(screen_image_filename)\n        h, w, _ = screen.shape\n        # center pointer\n        pointer = np.array([h // 2,  w // 2])\n        red_range=np.array([[0, 0, 150], [100, 100, 255]])\n        is_red = cv2.countNonZero(cv2.inRange(screen[pointer[0],pointer[1]].reshape(1,1,3), red_range[0], red_range[1]))\n        if is_red:\n            shoot(0.5,0.5)\n            time.sleep(POST_WAIT_TIME)\n            continue\n        if not detect_target.endswith(' .'):\n            detect_target += ' .'\n        _, boxes, logits, phrases = gd_detector.detect(screen_image_filename, detect_target, box_threshold=0.4)\n        # enemy detection\n        follow_theta, follow_info = circle_detector.detect(minimap_image_filename,detect_mode='red', debug=debug)\n        logger.debug(f'turn: {follow_theta}')\n        if abs(follow_theta)<=360:"
        },
        {
            "comment": "This code is part of an auto-shooting system. It checks if the enemy has been detected and determines whether shooting should continue or be terminated. If no enemy has been detected for a certain number of steps, shooting will be terminated. The code also sorts the detected boxes based on their area, and selects phrases based on the sorted areas.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/composite_skills/auto_shoot.py\":97-121",
            "content": "            follow_theta = np.sign(follow_theta) * np.clip(abs(follow_theta),0,180)\n            terminal_flags.append(0)\n        else:\n            terminal_flags.append(1)\n            # if sum(terminal_flags[-CONTINUE_NO_ENEMY_FREQ:]) == CONTINUE_NO_ENEMY_FREQ:\n            #     logger.debug(f'From step {step} to {step-CONTINUE_NO_ENEMY_FREQ} no enemy detected! Shooting is terminated.')\n            #     return\n        if debug:\n            cv2.imwrite(os.path.join(save_dir, f\"red_detect_{timestep}.jpg\"), follow_info['vis'])\n        if not phrases:\n            if abs(follow_theta)<=360:\n                turn(follow_theta)\n                time.sleep(POST_WAIT_TIME)\n            continue\n        # sort according to areas\n        areas = [(b[2]*b[3]).item() for b in boxes]\n        area_ascend_index = np.argsort(areas)\n        boxes = torch.stack([boxes[i] for i in area_ascend_index])\n        logits = torch.stack([logits[i] for i in area_ascend_index])\n        phrases = [phrases[i] for i in area_ascend_index]\n        if SHOOT_PEOPLE_TARGET_NAME in detect_target.lower():"
        },
        {
            "comment": "This code section is used for removing duplicate or unnecessary boxes from the input image. It checks if there are more than one box, then finds the closest box to a specific point and removes it if necessary. If there's only one box, it removes that single box as well. It also annotates the updated image with the remaining boxes and phrases, saving it for further use.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/composite_skills/auto_shoot.py\":123-148",
            "content": "            if len(boxes) > 1:\n                index = 0\n                dis = 1.5\n                for i in range(len(boxes)):\n                    down_mid = (boxes[i, 0], boxes[i, 1] + boxes[i, 3] / 2)\n                    distance = torch.sum(torch.abs(torch.tensor(down_mid) - torch.tensor((0.5, 1.0))))\n                    if distance < dis:\n                        dis = distance\n                        index = i\n                boxes = torch.cat([boxes[:index], boxes[index + 1:]])\n                logits = torch.cat([logits[:index], logits[index + 1:]])\n                phrases.pop(index)\n                logger.debug(f'dis:{dis}  remove{index}')\n            elif len(boxes) == 1:\n                boxes = torch.tensor(boxes[1:])\n                logits = torch.tensor(logits[1:])\n                phrases.pop(0)\n        if debug:\n            annotated_frame = annotate(image_source=screen, boxes=boxes, logits=logits, phrases=phrases)\n            cv2.imwrite(os.path.join(save_dir, f\"annotated_{timestep}.jpg\"), annotated_frame)"
        },
        {
            "comment": "This code checks the detected objects and their coordinates within a specific format. It filters out large human-occupied areas, continues if a certain object is detected, and updates shoot_x and shoot_y variables based on the detected box's location. Debug information is printed or a line is drawn on an annotated frame.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/composite_skills/auto_shoot.py\":151-171",
            "content": "        xyxy = box_convert(boxes=boxes * torch.Tensor([w, h, w, h]), in_fmt=\"cxcywh\", out_fmt=\"xyxy\").numpy().astype(int)\n        is_shoot = False\n        for j, (detect_xyxy, detect_object, detect_confidence) in enumerate(zip(xyxy, phrases, logits)):\n            if debug:\n                logger.debug(f'detect_xyxy is {detect_xyxy},detect_object is {detect_object},shoot_xy is {int((detect_xyxy[0] + detect_xyxy[2]) / 2)},{int((detect_xyxy[1] + detect_xyxy[3]) / 2)}')\n            # exclude the person occupied large area (threshold: 0.1)\n            s_w = SHOOT_PEOPLE_TARGET_NAME in detect_object.lower()  # true represents shoot wolves\n            if s_w and boxes[j][2] * boxes[j][3] > 0.06:\n                continue\n            if detect_object in detect_target:\n                shoot_x = boxes[j][0]\n                shoot_y = boxes[j][1]\n                if debug:\n                    cv2.arrowedLine(annotated_frame, (config.game_resolution[0] // 2, config.game_resolution[1] // 2), (\n                     "
        },
        {
            "comment": "This code detects a target object and if it's detected, it shoots at the target. If not detected or with low detection probability, it turns to follow a red circle on the minimap. It also saves annotated images and logs pixel coordinates for shooting. The post-wait time ensures actions are spaced out appropriately.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/composite_skills/auto_shoot.py\":171-193",
            "content": "   int((detect_xyxy[0] + detect_xyxy[2]) / 2), int((detect_xyxy[1] + detect_xyxy[3]) / 2)),(0, 255, 0), 2, tipLength=0.1)\n                    cv2.imwrite(os.path.join(save_dir, f\"annotated_{detect_object}_{timestep}.jpg\"), annotated_frame)\n                logger.debug(f'pixel is {shoot_x},{shoot_y}')\n                shoot(shoot_x, shoot_y)\n                time.sleep(POST_WAIT_TIME)\n                is_shoot = True\n                break\n        if not is_shoot or (is_shoot and np.random.uniform(0,1) < .2): # turn\n            follow_theta, follow_info = circle_detector.detect(minimap_image_filename,detect_mode='red', debug=debug)\n            logger.debug(f'turn: {follow_theta}')\n            if abs(follow_theta)<=360:\n                follow_theta = np.sign(follow_theta) * np.clip(abs(follow_theta),0,180)\n                turn(follow_theta)\n                time.sleep(POST_WAIT_TIME)\n            if debug:\n                cv2.imwrite(os.path.join(save_dir, f\"red_detect_{timestep}.jpg\"), follow_info['vis'])\n__all__ = ["
        },
        {
            "comment": "The code defines a list of two strings \"shoot_people\" and \"shoot_wolves\". These strings could be used as action identifiers for shooting different targets in the game.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/composite_skills/auto_shoot.py\":194-196",
            "content": "    \"shoot_people\",\n    \"shoot_wolves\"\n]"
        }
    ]
}