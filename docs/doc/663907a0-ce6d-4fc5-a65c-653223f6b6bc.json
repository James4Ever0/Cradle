{
    "summary": "The code defines a class, LocalMemory, that extends BaseMemory and offers JSON-based local memory storage with features like memory path, loading/saving data, and handling task duration for tasks such as summarization and task guidance.",
    "details": [
        {
            "comment": "Class LocalMemory extends BaseMemory and provides a memory storage using JSON files. It has an attribute \"memory_path\" for the storage location, \"max_recent_steps\" to limit recent steps history, and other attributes like \"task_duration\", \"recent_history\". It uses load_json and save_json functions for reading and writing data.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/memory/local_memory.py\":0-40",
            "content": "from typing import (\n    Any,\n    List,\n    Dict,\n    Union,\n    Tuple,\n)\nimport os\nfrom cradle.config import Config\nfrom cradle import constants\nfrom cradle.log import Logger\nfrom cradle.memory.base import BaseMemory, Image\nfrom cradle.utils.json_utils import load_json, save_json\nconfig = Config()\nlogger = Logger()\nclass LocalMemory(BaseMemory):\n    storage_filename = \"memory.json\"\n    def __init__(\n        self,\n        memory_path: str = '',\n        max_recent_steps: int = 5\n    ) -> None:\n        self.max_recent_steps = max_recent_steps\n        self.memory_path = memory_path\n        self.task_duration = 3\n        self.recent_history = {\"image\": [],\n                               constants.AUGMENTED_IMAGES_MEM_BUCKET:[],\n                               \"action\": [],\n                               \"decision_making_reasoning\": [],\n                               \"success_detection_reasoning\": [],\n                               \"self_reflection_reasoning\": [],\n                               \"image_description\":[],\n                               \"task_guidance\":[],"
        },
        {
            "comment": "This code defines a class with attributes for dialogue, task description, skill library, and summarization. It also includes methods to add recent information to memory, retrieve recent information, and set the last task duration.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/memory/local_memory.py\":41-74",
            "content": "                               \"dialogue\":[],\n                               \"task_description\":[],\n                               \"skill_library\":[],\n                               \"summarization\":\"The player is playing the game Red Dead Redemption for the PC.\",\n                               \"long_horizon_task\":\"\",\n                               \"last_task_guidance\":\"\",\n                               \"last_task_duration\": self.task_duration}\n    def add_recent_history(\n        self,\n        key: str,\n        info: Any,\n    ) -> None:\n        \"\"\"Add recent info (skill/image/reasoning) to memory.\"\"\"\n        self.recent_history[key].append(info)\n        if len(self.recent_history[key]) > self.max_recent_steps:\n            self.recent_history[key].pop(0)\n    def get_recent_history(\n        self,\n        key: str,\n        k: int = 1,\n    ) -> List[Any]:\n        \"\"\"Query recent info (skill/image/reasoning) from memory.\"\"\"\n        if len(self.recent_history[key]) == 0:\n            return [\"\"]\n        return self.recent_history[key][-k:] if len(self.recent_history[key]) >= k else self.recent_history[key]"
        },
        {
            "comment": "This code defines several methods for handling memory tasks. The `add_summarization` method adds a summary to recent history, while the `get_summarization` method retrieves it. The `add_task_guidance` method adds a task description and duration to recent history, while the `get_task_guidance` method retrieves either the last or previous task guidance based on a boolean parameter. Finally, the `load` method loads memory from a local file.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/memory/local_memory.py\":77-104",
            "content": "    def add_summarization(self, summary: str) -> None:\n        self.recent_history[\"summarization\"] = summary\n    def get_summarization(self) -> str:\n        return self.recent_history[\"summarization\"]\n    def add_task_guidance(self, task_description: str, long_horizon: bool) -> None:\n        self.recent_history['last_task_guidance'] = task_description\n        self.recent_history['last_task_duration'] = self.task_duration\n        if long_horizon:\n            self.recent_history['long_horizon_task'] = task_description\n    def get_task_guidance(self, use_last = True) -> str:\n        if use_last:\n            return self.recent_history['last_task_guidance']\n        else:\n            self.recent_history['last_task_duration'] -= 1\n            if self.recent_history['last_task_duration']>=0:\n                return self.recent_history['last_task_guidance']\n            else:\n                return self.recent_history['long_horizon_task']\n    def load(self, load_path = None) -> None:\n        \"\"\"Load the memory from the local file.\"\"\""
        },
        {
            "comment": "This code checks if a file exists at the specified path, then loads and stores the memory in that file. If it doesn't exist, an error is logged. The `save()` function saves the memory to the local file with proper formatting using JSON.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/memory/local_memory.py\":105-117",
            "content": "        # @TODO load and store whole memory\n        if load_path != None:\n            if os.path.exists(os.path.join(load_path, self.storage_filename)):\n                self.recent_history = load_json(os.path.join(load_path, self.storage_filename))\n                logger.write(f\"{os.path.join(load_path, self.storage_filename)} has been loaded.\")\n            else:\n                logger.error(f\"{os.path.join(load_path, self.storage_filename)} does not exist.\")\n    def save(self) -> None:\n        \"\"\"Save the memory to the local file.\"\"\"\n        # @TODO load and store whole memory\n        save_json(file_path = os.path.join(self.memory_path, self.storage_filename), json_dict = self.recent_history, indent = 4)"
        }
    ]
}