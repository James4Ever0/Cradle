{
    "summary": "The code uses template matching, Kalman filter threshold, and OCR adjustments for icon detection to control a robot/vehicle in reaching specified icons while handling obstacles and logging information.",
    "details": [
        {
            "comment": "The code defines two skills, \"go_to_horse\" and \"go_to_icon\". \"go_to_horse\" navigates to the closest horse icon on the minimap, while \"go_to_icon\" navigates to a specified target icon on the minimap. Both skills use the \"go_to_icon\" function for navigation. The code imports necessary modules, sets default values, and registers the skills using the skill registry.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/composite_skills/go_to_icon.py\":0-34",
            "content": "import os, time, math\nimport cv2\nimport numpy as np\nfrom MTM import matchTemplates\nfrom cradle.gameio.atomic_skills.move import turn, move_forward\nfrom cradle.gameio.lifecycle.ui_control import take_screenshot\nfrom cradle.config import Config\nfrom cradle.log import Logger\nfrom cradle.gameio.skill_registry import register_skill\nfrom cradle.utils.file_utils import assemble_project_path\nconfig = Config()\nlogger = Logger()\nDEFAULT_GO_TO_ICON_ITERATIONS = 20\nDEFAULT_GO_TO_HORSE_ITERATIONS = DEFAULT_GO_TO_ICON_ITERATIONS\n@register_skill(\"go_to_horse\")\ndef go_to_horse():\n    \"\"\"\n    Best way to go to the closest horse. Uses the minimap. Horses are useful to travel mid to long distances.\n    \"\"\"\n    go_to_icon(\"horse\", iterations=DEFAULT_GO_TO_HORSE_ITERATIONS, debug=False)\n# @register_skill(\"go_to_icon\")\ndef go_to_icon(target: str = \"horse\", iterations=DEFAULT_GO_TO_ICON_ITERATIONS, debug: bool = False):\n    \"\"\"\n    Navigates to the closed icon of the target in the minimap.\n    Parameters:\n    - target: Name of the target icon type on the minimap. The default value is \"horse\""
        },
        {
            "comment": "The code defines two functions: `cv_go_to_icon` and `match_template`. `cv_go_to_icon` calculates the angle between the origin of an image and a target point, while `match_template` reads in two images, resizes the second if needed, and possibly performs template matching to find the location of the template within the source image. The code is part of a larger project related to image processing.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/composite_skills/go_to_icon.py\":35-57",
            "content": "    \"\"\"\n    cv_go_to_icon(iterations, template_file=f'./res/icons/{target}.jpg', debug=debug)\ndef get_theta(origin_x, origin_y, center_x, center_y):\n    '''\n    The origin of the image coordinate system is usually located in the upper left corner of the image, with the x-axis to the right indicating a positive direction and the y-axis to the down indicating a positive direction. Using vertical upward as the reference line, i.e. the angle between it and the negative direction of the y-axis\n    '''\n    theta = math.atan2(center_x - origin_x, origin_y - center_y)\n    theta = math.degrees(theta)\n    return theta\n# @TODO: This should be merged with the one in utils/template_matching.py\ndef match_template(src_file, template_file, template_resize_scale = 1, debug=False):\n    srcimg = cv2.imread(assemble_project_path(src_file))\n    template = cv2.imread(assemble_project_path(template_file))\n    origin = (srcimg.shape[0] // 2, srcimg.shape[1] //2)\n    # resize\n    if template_resize_scale != 1:\n        template = cv2.resize(template, (0, 0), fx=template_resize_scale, fy=template_resize_scale)"
        },
        {
            "comment": "Code performs template matching to detect an icon, calculates its position and distance from the origin, and applies Kalman filter threshold to create a measure. If debugging is enabled, it logs confidence, distance, and displays the icon's bounding box and arrowed line on the source image.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/composite_skills/go_to_icon.py\":59-81",
            "content": "    detection = matchTemplates([('', cv2.resize(template, (0, 0), fx=s, fy=s)) for s in [1]],\n                               srcimg,\n                               N_object=1,\n                               method=cv2.TM_CCOEFF_NORMED,\n                               maxOverlap=0.1)\n    (x, y, h, w), confidence = detection['BBox'].iloc[0], detection['Score'].iloc[0]\n    center_x = x + w // 2\n    center_y = y + h // 2\n    # go towards it\n    theta = get_theta(*origin, center_x, center_y)\n    dis = np.sqrt((center_x - origin[0]) ** 2 + (center_y - origin[1]) ** 2)\n    # KalmanFilter threshold = 0.59\n    measure = {'confidence': confidence, 'distance': dis, 'bounding_box': (x, y, h, w)}\n    if debug:\n        logger.debug(f\"confidence: {confidence:.3f}, distance: {dis:.3f}, theta: {theta:.3f}\")\n        vis = srcimg.copy()\n        cv2.rectangle(vis, (x,y), (x + w, y + h), (0, 0, 255), 2)\n        cv2.putText(vis, f'{confidence:.3f}', (x,y), cv2.FONT_HERSHEY_SIMPLEX, .5, (0, 0, 255), 1, cv2.LINE_AA)\n        cv2.arrowedLine(vis, origin, (center_x, center_y), (0, 255, 0), 2, tipLength=0.1)"
        },
        {
            "comment": "This function, cv_go_to_icon(), takes iterations, template_file, terminal_threshold (threshold for the algorithm to stop), and debug as inputs. It measures theta using match_template() on an observation screenshot and image template. The function checks if the OCR output is different from the previous one and adjusts OCR settings accordingly.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/composite_skills/go_to_icon.py\":83-114",
            "content": "        measure['vis'] = vis\n        #cv2.imshow(\"vis\", measure['vis'])\n    return theta, measure\ndef cv_go_to_icon(\n        iterations,\n        template_file,\n        terminal_threshold=20,\n        debug=False,\n):\n    save_dir = config.work_dir\n    terminal_threshold *= config.resolution_ratio\n    check_success, prev_dis, prev_theta, counter, ride_attempt, ride_mod, dis_stat = False, 0, 0, 0, 0, 10, []\n    for step in range(iterations):\n        logger.write(f'Go to icon iter #{step}')\n        if config.ocr_different_previous_text:\n            logger.write(\"The text is different from the previous one.\")\n            config.ocr_enabled = False # disable ocr\n            config.ocr_different_previous_text = False  # reset\n            break\n        timestep = time.time()\n        # 1. Get observation screenshot\n        take_screenshot(timestep, config.game_region, config.minimap_region, draw_axis=False)\n        theta, info = match_template(os.path.join(save_dir, f\"minimap_{timestep}.jpg\"), template_file, config.resolution_ratio, debug)"
        },
        {
            "comment": "This code appears to be a part of an AI system that controls a robot or vehicle to reach a specified icon. It checks if the robot has reached the icon, handles cases where it may get stuck, and then proceeds to turn and move towards the icon while logging relevant information.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/composite_skills/go_to_icon.py\":115-142",
            "content": "        dis, confidence = info['distance'], info['confidence']\n        if debug:\n            cv2.imwrite(os.path.join(save_dir, f\"minimap_{timestep}_detect.jpg\"), info['vis'])\n        if dis < terminal_threshold and abs(theta) < 90:  # begin to settle\n            logger.write('Success! Reached the icon.')\n            return True\n        # 2. Check stuck\n        if abs(prev_dis - dis) < 0.5 and abs(prev_theta - theta) < 0.5:\n            counter += 1\n            if counter >= 1:\n                if debug:\n                    logger.debug('Move randomly to get unstuck')\n                for _ in range(2):\n                    turn(np.random.randint(30, 60) if np.random.rand()<0.5 else -np.random.randint(30, 60))\n                    move_forward(np.random.randint(2, 4))\n        else:\n            counter = 0\n        # 3. Move\n        turn(theta)\n        move_forward(1.5)\n        time.sleep(0.5)\n        if debug:\n            logger.debug(f\"step {step:03d} | timestep {timestep} done | theta: {theta:.2f} | distance: {dis:.2f} | confidence: {confidence:.3f} {'below threshold' if confidence < 0.5 else ''}\")"
        },
        {
            "comment": "This code defines a function \"go_to_horse\" that attempts to move the game's icon. If it fails to reach the icon, it logs an error and returns False. The logger is used for error messages, and only one function is exported from this file, which is \"go_to_horse\".",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/composite_skills/go_to_icon.py\":144-152",
            "content": "        prev_dis, prev_theta = dis, theta\n    logger.error(f'Go to icon failed to reach icon.')\n    return False  # failed\n__all__ = [\n    \"go_to_horse\",\n]"
        }
    ]
}