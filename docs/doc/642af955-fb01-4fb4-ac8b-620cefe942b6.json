{
    "summary": "The Cradle framework focuses on computer control, reasoning, and skill curation in a standardized environment. Users install specific packages and follow guidelines for game setup using OpenAI provider and Infra code. This Python-based code enables running Red Dead Redemption II game framework agent with adjusted interface settings and requests citation when used.",
    "details": [
        {
            "comment": "This code is the README.md file for the Cradle framework, which aims to achieve General Computer Control by enabling agents with strong reasoning abilities, self-improvement, and skill curation in a standardized general environment. The repository includes resources such as the website, Arxiv paper, PDF, and requirements for Python version 3.10.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/README.md\":0-19",
            "content": "# Cradle: Towards General Computer Control\n<div align=\"center\">\n[[Website]](https://baai-agents.github.io/Cradle/)\n[[Arxiv]](https://arxiv.org/abs/2403.03186)\n[[PDF]](https://arxiv.org/pdf/2403.03186.pdf)\n[![Python Version](https://img.shields.io/badge/Python-3.10-blue.svg)]()\n[![GitHub license](https://img.shields.io/badge/MIT-blue)]()\n![](docs/images/cradle-intro.png)\nThe Cradle framework is a first attempt at General Computer Control (GCC). Cradle supports agents to ace any computer task by enabling strong reasoning abilities, self-improvment, and skill curation, in a standardized general environment with minimal requirements.\n<img src=\"docs/images/rd2_task_grid_03.gif\" width=\"320\" height=\"180\"/> <img src=\"docs/images/rd2_task_grid_02.gif\" width=\"320\" height=\"180\"/> </br>\n<img src=\"docs/images/rd2_task_grid_01.gif\" width=\"320\" height=\"180\"/> <img src=\"docs/images/rd2_task_grid_04.gif\" width=\"320\" height=\"180\"/>\n## Videos\n<a alt=\"Watch the video\" href=\"https://www.youtube.com/watch?v=Cx-D708BedY\"><img src=\"docs/images/video1.jpg\" width=\"33%\" /></a>"
        },
        {
            "comment": "Video thumbnails are available for watching on YouTube. The code provides instructions to set up the project environment, including creating a conda environment, activating it, and installing necessary packages. Users are advised to have CUDA environment installed before proceeding. GroundingDino is downloaded from the specified link into the cache directory.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/README.md\":20-58",
            "content": "&nbsp;&nbsp;\n<a alt=\"Watch the video\" href=\"https://www.youtube.com/watch?v=Oa4Ese8mMD0\"><img src=\"docs/images/video2.jpg\" width=\"33%\" /></a>\nClick on either of the video thumbnails above to watch them on YouTube.\n</div>\n# Notice\nWe are still working on further cleaning up the code and constantly updating it. We are also extending Cradle to more games and software. Feel free to reach out!\n# Project Setup\nPlease setup your environment as:\n```bash\nconda create --name cradle-dev python=3.10\nconda activate cradle-dev\npip3 install -r requirements.txt\n```\n### To install GroundingDino:\nDownload its weights to the cache directory:\n```bash\nmkdir cache\ncd cache\ncurl -L -C - -O https://github.com/IDEA-Research/GroundingDINO/releases/download/v0.1.0-alpha2/groundingdino_swinb_cogcoor.pth\ncd ..\n```\n**Note:**\nYou should have a CUDA environment, please make sure you have properly installed CUDA dependencies first. You can use the following command to detect it on Linux.\n```bash\nnvcc -V\n```\nOr search for its environment variab"
        },
        {
            "comment": "This code provides instructions for setting up CUDA and pytorch correctly to avoid a \"NameError: name '_C' is not defined\" error. It suggests installing CUDA version 11.8 from the NVIDIA website, ensuring pytorch is installed with the right CUDA dependencies, and providing pip installation commands as alternatives if the conda method doesn't work.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/README.md\":58-82",
            "content": "le: CUDA_HOME or CUDA_PATH. On Windows it should be something like \"C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.8\" and on Linux like \"/usr/local/cuda\".\nIf you don't get the specific version, you should download cudatoolkit and cuDNN first (version 11.8 is recommended).\nIf you don't download CUDA correctly, after installing GroundingDino, the code will produce:\n```bash\nNameError: name '_C' is not defined\n```\nIf this happened, please re-setup CUDA and pytorch, reclone the git and perform all installation steps again.\nOn Windows install from https://developer.nvidia.com/cuda-11-8-0-download-archive (Linux packages also available).\nMake sure pytorch is installed using the right CUDA dependencies.\n```bash\nconda install pytorch torchvision cudatoolkit=11.8 -c nvidia -c pytorch\n```\nIf this doesn't work, or you prefer the pip way, you can try something like:\n```bash\npip3 install --upgrade torch==2.1.1+cu118 -f https://download.pytorch.org/whl/torch_stable.html\npip3 install torchvision==0.16.1+cu118 -f https://download.pytorch.org/whl/torch_stable.html"
        },
        {
            "comment": "Install GroundingDino with project dependencies using the provided package and commands. Pre-download required model files from HuggingFace and set environment variables to avoid needing a VPN during execution.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/README.md\":83-106",
            "content": "```\nNow, you should install the pre-compiled GroundingDino with the project dependencies. You can use the package in our repo and the following commands:\n```bash\ncd deps\npip install groundingdino-0.1.0-cp310-cp310-win_amd64.whl\ncd ..\n```\nOnce it is installed, we need to pre-download some required model files and set some environment variables.\n```bash\n# Define the necessary environment variables, this can be done in the .env file in the /cradle directory\nHUGGINGFACE_HUB_CACHE = \"./cache/hf\" # This can be the full path too, if the relative one doesn't work\n# Pre-download huggingface files needed by GroundingDino\n# This step may require a VPN connection\n# Windows user needs to run it in git bash\nmkdir $HUGGINGFACE_HUB_CACHE\nhuggingface-cli download bert-base-uncased config.json tokenizer.json vocab.txt tokenizer_config.json model.safetensors --cache-dir $HUGGINGFACE_HUB_CACHE\n# Define the last necessary environment variable, this can be done in the .env file in the /cradle directory\n# This step will avoid needing a VPN to run"
        },
        {
            "comment": "The code snippet provides instructions to clone, build and install GroundingDino if there are compatibility issues. It also suggests cloning the GitHub repository, installing dependencies using pip3, and specifying the C++ build tools for Windows. Additionally, it mentions how to install the videosubfinder for gather information module from SourceForge.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/README.md\":107-138",
            "content": "TRANSFORMERS_OFFLINE = \"TRUE\"\n```\nIf for some reason there is some incompatibility in installing or running GroundingDino, it's recommended to recreate your environment.\nOnly if really necessary, you can try to clone and compile/install GroundingDino yourself.\n```bash\n# Clone\ncd ..\ngit clone https://github.com/IDEA-Research/GroundingDINO.git\ncd GroundingDINO\n# Build and install it\npip3 install -r requirements.txt\npip3 install .\ncd ../Cradle\n```\nIt should install without errors and now it will be available for any project using the same conda environment (cradle-dev).\nTo build the C++ code on Windows, you may need to install build tools.\nDownload them from https://visualstudio.microsoft.com/visual-cpp-build-tools/\nMake sure to select \"Desktop Environment with C++\" and include the 1st 3 optional packages:\n- MSVC v141 or higher\n- Windows SDK for your OS version\n- CMake tools\n### To install the videosubfinder for gather information module\nDownload the videosubfinder from https://sourceforge.net/projects/videosubfinder/ and extract the files into the res/tool/subfinder folder."
        },
        {
            "comment": "This code explains the file structure and provides instructions for installing OCR tools using spaCy library. Users can choose between two options: Option 1 involves downloading a specific model version, while Option 2 requires copying a provided URL. It also advises modifying settings files only when necessary as values have already been tuned.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/README.md\":140-165",
            "content": "The file structure should be like this:\n- res\n  - tool\n    - subfinder\n      - VideoSubFinderWXW.exe\n      - test.srt\n      - ...\n#### Tunning videosubfinder\nUse res/tool/general.clg to overwrite res/tool/subfinder/settings/general.cfg file.\nTo get the best extraction results, you can tune the subfinder by changing the parameters in the settings/general.cfg file. You may follow the readme me in Docs folder to get more information about the parameters.\nOnly modify it if absolutely necessary. Values have already been tuned to game scenario and environment setup.\n### To install the OCR tools\n```\n1. Option 1\n# Download best-matching version of specific model for your spaCy installation\npython -m spacy download en_core_web_lg\nor\n# pip install .tar.gz archive or .whl from path or URL\npip install https://github.com/explosion/spacy-models/releases/download/en_core_web_lg-3.7.1/en_core_web_lg-3.7.1.tar.gz\n2. Option 2\n# Copy this url https://github.com/explosion/spacy-models/releases/download/en_core_web_lg-3.7.1/en_core_web_lg-3.7.1.tar.gz"
        },
        {
            "comment": "This code instructs the user to navigate to a specific URL, download a file, change directory to \"res/spacy/data\", and then install the downloaded file using pip. It also provides guidelines for file encoding and opening/saving files using cradle.utils. The subsequent sections describe the Infra code, specifically mentioning OpenAI provider and the usage of .env files for storing private info not to be shared on GitHub.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/README.md\":166-190",
            "content": "# Paste it in the browser and download the file to res/spacy/data\ncd res/spacy/data\npip install en_core_web_lg-3.7.1.tar.gz\n```\n## General guidelines\nAlways, **always**, **ALLWAYS** get the latest /main branch.\nAny file with text content in the project in the resources directory (./res) should be in UTF-8 encoding. Use the cradle.utils to open/save files.\n## Infra code\n### 1. OpenAI provider\nOpenAI provider now can expose embeddings and LLM from OpenAI and Azure together. Users only need to create one instance of each and pass the appropriate configuration.\nExample configurations are in /conf. To avoid exposing sensitive details, keys and other private info should be defined in environmental variables.\nThe suggested way to do it is to create a .env file in the root of the repository (never push this file to GitHub) where variables can be defined, and then mention the variable names in the configs.\nPlease check the examples below.\nSample .env file containing private info that should never be on git/GitHub:"
        },
        {
            "comment": "This code defines two OpenAI keys and a base URL for an Azure OpenAI provider. The sample config specifies the key variable, embedding model, completion model, and whether the provider is on Azure or not. The RDR2 installation section explains that Cradle focuses on the RDR2 game, provides instructions to change settings before running the code, and specifies to set mouse mode to DirectInput and adjust control settings for easier use.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/README.md\":191-222",
            "content": "```\nOA_OPENAI_KEY = \"abc123abc123abc123abc123abc123ab\"\nAZ_OPENAI_KEY = \"123abc123abc123abc123abc123abc12\"\nAZ_BASE_URL = \"https://abc123.openai.azure.com/\"\n```\nSample config for an OpenAI provider:\n```\n{\n\t\"key_var\" : \"OA_OPENAI_KEY\",\n\t\"emb_model\": \"text-embedding-ada-002\",\n\t\"comp_model\": \"gpt-4-vision-preview\",\n\t\"is_azure\": false\n}\n```\n## RDR2 Install\nCradle currently focuses on [RDR2 game](https://www.rockstargames.com/reddeadredemption2). You can get it from any PC platform you prefer. However, the current codebase has been tested on MS Windows.\n## Game Settings\n### 1. Change settings before running the code.\n#### 1.1 Mouse mode\nChange mouse mode in the control setting to DirectInput.\n| Original interface | Changed interface |\n|------------|------------|\n| ![Original interface](docs/images/raw_input.png) | ![Changed interface](docs/images/direct_input.png) |\n#### 1.2 Control\nChange both two 'Tap and Hold Speed Control' to on, so we can press w twice to run, saving the need to press shift. Also make sure 'Aiming Mode' to 'Hold To Aim', so we need to keep pressing the mouse right button when aiming."
        },
        {
            "comment": "Original interface and changed interface images for move control.\nRecommended default resolution is 1920x1080 with 16:9 aspect ratio, set game Screen Type to Windowed Borderless.\nMini-map settings for better visibility: Radar Blip Size, Map Blip Size, and Expanded Radar.\nSubtitle option available in the code.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/README.md\":223-242",
            "content": "| Original interface | Changed interface |\n|------------|------------|\n| ![Original interface](docs/images/move_control_previous.png) | ![Changed interface](docs/images/move_control_now.png) |\n#### 1.3 Game screen\nThe recommended default resolution to use is 1920x1080, but it can vary if the **16:9** aspect ratio is preserved.  Other resolution is not fully tested. DO NOT change the aspect ratio. Also, remember to set the game Screen Type to **Windowed Borderless**.\n`SETTING -> GRAPHICS -> Resolution = 1920X1080` and  `Screen Type = Windowed Borderless`\n![game_position](docs/images/game_position.png)\n![resolution](docs/images/resolution.png)\n#### 1.4 Mini-map\nRemember to enlarge the icon to ensure the program is working well following: `SETTING -> DISPLAY ->  Radar Blip Size = Large` and  `SETTING -> DISPLAY ->  Map Blip Size = Large` and  `SETTING -> DISPLAY ->  Radar = Expanded` (or press Alt + X).\n![](docs/images/enlarge_minimap.png)\n![minimap_setting](docs/images/minimap_setting.png)\n#### 1.4 Subtitles"
        },
        {
            "comment": "This code provides instructions on how to run the framework agent for a Red Dead Redemption II game. It requires launching the game, pausing it, and then running the prototype_runner.py command with Python. The authors request a citation if their work is found useful.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/README.md\":243-275",
            "content": "Enable to show the speaker's name in the subtitles.\n![subtitles_setting](docs/images/subtitles.png)\n## Getting Started\nTo run the agent, follow these steps:\n1- Launch the RDR2 game\n2- To start from the beginning of Chapter #1, after you lauch the game, pass all introductory videos\n3- Pause the game\n4- Launch the framework agent with the command:\n```\npython prototype_runner.py \n```\n## Citation\nIf you find our work useful, please consider citing us!\n```\n@article{weihao2024cradle,\n  title     = {{Towards General Computer Control: A Multimodal Agent For Red Dead Redemption II As A Case Study}},\n  author    = {Weihao Tan and Ziluo Ding and Wentao Zhang and Boyu Li and Bohan Zhou and Junpeng Yue and Haochong Xia and Jiechuan Jiang and Longtao Zheng and Xinrun Xu and Yifei Bi and Pengjie Gu and Xinrun Wang and B\u00f6rje F. Karlsson and Bo An and Zongqing Lu},\n  journal   = {arXiv:2403.03186},\n  month     = {March},\n  year      = {2024},\n  primaryClass={cs.AI}\n}\n```"
        }
    ]
}