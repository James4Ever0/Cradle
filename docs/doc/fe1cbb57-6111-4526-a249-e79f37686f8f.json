{
    "summary": "The Config class sets default settings for an application and initializes various parameters for a program, while handling single-system runs and verifying resolution. It also defines functions for continuous mode and log directory.",
    "details": [
        {
            "comment": "Config class defines various default settings and configurations for the application, including game resolution, screen ratio, temperature value, seed, fixed values, post-action wait time, message construction mode, OCR crop region, root directory, work directory, log directory, and environment name. These settings are likely used throughout the codebase to control the behavior of different functions or processes.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/config/config.py\":0-41",
            "content": "from collections import namedtuple\nimport os\nimport time\nfrom pathlib import Path\nfrom dotenv import load_dotenv\nfrom colorama import Fore, Style, init as colours_on\nimport pyautogui\nfrom cradle import constants\nfrom cradle.utils import Singleton\nfrom cradle.utils.file_utils import assemble_project_path, get_project_root\nload_dotenv(verbose=True)\nclass Config(metaclass=Singleton):\n    \"\"\"\n    Configuration class.\n    \"\"\"\n    DEFAULT_GAME_RESOLUTION = (1920, 1080)\n    DEFAULT_GAME_SCREEN_RATIO = (16, 9)\n    DEFAULT_TEMPERATURE = 1.0\n    DEFAULT_SEED = None\n    DEFAULT_FIXED_SEED_VALUE = 42\n    DEFAULT_FIXED_TEMPERATURE_VALUE = 0.0\n    DEFAULT_POST_ACTION_WAIT_TIME = 3 # Currently in use in multiple places with this value\n    DEFAULT_MESSAGE_CONSTRUCTION_MODE = constants.MESSAGE_CONSTRUCTION_MODE_TRIPART\n    DEFAULT_OCR_CROP_REGION = (380, 720, 1920, 1080) # x1, y1, x2, y2, from top left to bottom right\n    root_dir = '.'\n    work_dir = './runs'\n    log_dir = './logs'\n    env_name = \"Red Dead Redemption 2\"\n    # config for frame extraction"
        },
        {
            "comment": "This code is initializing the Config class, setting default parameters such as debug mode, continuous mode, temperature, seed, and base resolution. It also normalizes mouse movement for full screen resolution and gets default LLM parameters from environment variables. The VideoFrameExtractor_path and VideoFrameExtractor_placeholderfile_path are defined for future use.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/config/config.py\":42-70",
            "content": "    VideoFrameExtractor_path = \"./res/tool/subfinder/VideoSubFinderWXW.exe\"\n    VideoFrameExtractor_placeholderfile_path = \"./res/tool/subfinder/test.srt\"\n    def __init__(self) -> None:\n        \"\"\"Initialize the Config class\"\"\"\n        self.debug_mode = False\n        self.continuous_mode = False\n        self.continuous_limit = 0\n        self.temperature = self.DEFAULT_TEMPERATURE\n        self.seed = self.DEFAULT_SEED\n        self.fixed_seed = False\n        if self.fixed_seed:\n            self.set_fixed_seed()\n        # Base resolution and region for the game in 4k, used for angle scaling\n        self.base_resolution = (3840, 2160)\n        self.base_minimap_region = (112, 1450, 640, 640)\n        # Full screen resolution for normalizing mouse movement\n        self.screen_resolution = pyautogui.size()\n        self.mouse_move_factor = self.screen_resolution[0] / self.base_resolution[0]\n        # Default LLM parameters\n        self.temperature = float(os.getenv(\"TEMPERATURE\", self.temperature))\n        self.max_tokens = int(os.getenv(\"MAX_TOKENS\", \"1024\"))"
        },
        {
            "comment": "This code appears to be initializing various parameters for a program. The parameters include memory backend, maximum recent steps and event count, parallel request settings, skill retrieval options, video FPS and duplicate frames, maximum images in self-reflection, decision-making image number, OCR settings, and more.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/config/config.py\":72-101",
            "content": "        # Memory parameters\n        self.memory_backend = os.getenv(\"MEMORY_BACKEND\", \"local\")\n        self.max_recent_steps = 5\n        self.event_count = 5\n        self.memory_load_path = None\n        # Parallel request to LLM parameters\n        self.parallel_request_gather_information = True\n        #Skill retrieval\n        self.skill_from_local = True\n        self.skill_local_path = './res/skills'\n        self.skill_retrieval = False\n        self.skill_num = 10\n        self.skill_scope = 'Full' #'Full', 'Basic', and None\n        # video\n        self.video_fps = 8\n        self.duplicate_frames = 4\n        # self-reflection\n        self.max_images_in_self_reflection = 4\n        # decision-making\n        self.decision_making_image_num = 2\n        # OCR local checks\n        self.ocr_fully_ban = True # whether to fully turn-off OCR checks\n        self.ocr_enabled = False # whether to enable OCR during composite skill loop\n        self.ocr_similarity_threshold = 0.9  # cosine similarity, smaller than this threshold the text is considered to be different"
        },
        {
            "comment": "The code initializes class variables and includes methods for setting fixed seed values and continuous mode. It also defines a list of composite skill names, sets the latest memory path (if enabled), and sets directories and game window information.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/config/config.py\":102-128",
            "content": "        self.ocr_different_previous_text = False # whether the text is different from the previous one\n        self.ocr_check_composite_skill_names = [\n            \"shoot_people\",\n            \"shoot_wolves\",\n            \"follow\",\n            \"go_to_horse\",\n            \"navigate_path\"\n        ]\n        # Just for convenience of testing, will be removed in final version.\n        self.use_latest_memory_path = False\n        if self.use_latest_memory_path:\n            self._set_latest_memory_path()\n        self._set_dirs()\n        self._set_game_window_info()\n    def set_fixed_seed(self, is_fixed: bool = True, seed: int = DEFAULT_FIXED_SEED_VALUE, temperature: float = DEFAULT_FIXED_TEMPERATURE_VALUE) -> None:\n        \"\"\"Set the fixed seed values. By default, used the default values. Please avoid using different values.\"\"\"\n        self.fixed_seed = is_fixed\n        self.seed = seed\n        self.temperature = temperature\n    def set_continuous_mode(self, value: bool) -> None:\n        \"\"\"Set the continuous mode value.\"\"\""
        },
        {
            "comment": "The code sets up directories for a single system run, creates a game window object if no actual game window is found, and contains functions to set continuous mode and define a log directory.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/config/config.py\":129-155",
            "content": "        self.continuous_mode = value\n    def _set_dirs(self) -> None:\n        \"\"\"Setup directories needed for one system run.\"\"\"\n        self.root_dir = get_project_root()\n        self.work_dir = assemble_project_path(os.path.join(self.work_dir, str(time.time())))\n        Path(self.work_dir).mkdir(parents=True, exist_ok=True)\n        self.log_dir = os.path.join(self.work_dir, self.log_dir)\n        Path(self.log_dir).mkdir(parents=True, exist_ok=True)\n    def _set_game_window_info(self):\n        named_windows = pyautogui.getWindowsWithTitle(self.env_name)\n        # Fake game window info for testing cases with no running game\n        game_window = namedtuple('A', ['left', 'top', 'width', 'height'])\n        game_window.left = 0\n        game_window.top = 0\n        game_window.width = self.DEFAULT_GAME_RESOLUTION[0]\n        game_window.height = self.DEFAULT_GAME_RESOLUTION[1]\n        if len(named_windows) == 0:\n            self._config_warn(f'-----------------------------------------------------------------')"
        },
        {
            "comment": "This code checks if the environment window is found. If not, it assumes an offline test run. Otherwise, it verifies the screen resolution and ratio for the game window. It then sets the game resolution, game region, calculates the minimap region, and adjusts its coordinates based on the game window's position.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/config/config.py\":156-168",
            "content": "            self._config_warn(f'Cannot find the env window. Assuming this is an offline test run!')\n            self._config_warn(f'-----------------------------------------------------------------')\n        else:\n            game_window = named_windows[0]\n            assert game_window.width >= self.DEFAULT_GAME_RESOLUTION[0] and game_window.height >= self.DEFAULT_GAME_RESOLUTION[1], 'The resolution of screen should at least be 1920 X 1080.'\n            assert game_window.width * self.DEFAULT_GAME_SCREEN_RATIO[1] == game_window.height * self.DEFAULT_GAME_SCREEN_RATIO[0], 'The screen ratio should be 16:9.'\n        self.game_resolution = (game_window.width, game_window.height)\n        self.game_region = (game_window.left, game_window.top, game_window.width, game_window.height)\n        self.resolution_ratio = self.game_resolution[0] / self.base_resolution[0]\n        self.minimap_region = self._calc_minimap_region(self.game_resolution)\n        self.minimap_region[0] += game_window.left\n        self.minimap_region[1] += game_window.top"
        },
        {
            "comment": "self.minimap_region is set as a tuple of the minimap region coordinates\n_calc_minimap_region scales the base minimap region based on resolution_ratio\n_config_warn prints a warning message in red color\n_set_latest_memory_path finds the latest file in work_dir and sets it as skill_local_path and memory_load_path",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/config/config.py\":169-186",
            "content": "        self.minimap_region = tuple(self.minimap_region)\n    def _calc_minimap_region(self, screen_region):\n        return [int(x * self.resolution_ratio ) for x in self.base_minimap_region]\n    def _config_warn(self, message):\n        colours_on()\n        print(Fore.RED + f' >>> WARNING: {message} ' + Style.RESET_ALL)\n    def _set_latest_memory_path(self):\n        path_list = os.listdir(self.work_dir)\n        path_list.sort()\n        if len(path_list) != 0:\n            self.skill_local_path = os.path.join(self.work_dir, path_list[-1])\n            self.memory_load_path = os.path.join(self.work_dir, path_list[-1])"
        }
    ]
}