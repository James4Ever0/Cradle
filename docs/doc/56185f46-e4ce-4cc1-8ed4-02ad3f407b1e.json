{
    "summary": "This Python code provides JSON handling functions, including loading/saving, validity checks, and pattern matching with regular expressions. It also includes parsing functions for semi-formatted JSON and text data, processing dictionaries, and replacing placeholders.",
    "details": [
        {
            "comment": "This Python code defines several functions for handling JSON data. It includes functions to load, save, check validity, and refine JSON strings. The code uses the built-in json library and regular expressions (re module) for pattern matching.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/utils/json_utils.py\":0-43",
            "content": "import json\nimport re\nfrom cradle import constants\nfrom cradle.log import Logger\nlogger = Logger()\ndef load_json(file_path):\n    with open(file_path, mode='r', encoding='utf8') as fp:\n        json_dict = json.load(fp)\n        return json_dict\ndef save_json(file_path, json_dict, indent=-1):\n    with open(file_path, mode='w', encoding='utf8') as fp:\n        if indent == -1:\n            json.dump(json_dict, fp, ensure_ascii=False)\n        else:\n            json.dump(json_dict, fp, ensure_ascii=False, indent=indent)\ndef check_json(json_string):\n    try:\n        json.loads(json_string)\n    except:\n        return False\n    return True\ndef refine_json(json_string):\n    patterns = [\n        r\"^`+json(.*?)`+\", # ```json content```, ```json content``, ...\n        r\"^json(.*?)\", # json content\n        r\"^json(.*?)\\.\" # json content.\n    ]\n    for pattern in patterns:\n        match = re.search(pattern, json_string, re.DOTALL)\n        if match:\n            json_string = match.group(1)\n            if check_json(json_string):\n                return json_string"
        },
        {
            "comment": "This code defines two functions, \"parse_semi_formatted_json\" and \"parse_semi_formatted_text\", which parse semi-formatted JSON and text data respectively. The JSON function first refines the input string, then loads it into an object using json.loads(). If there is an exception during this process, it logs the error message and original JSON string. The text parsing function splits the input string by newlines, trims whitespace, and processes key-value pairs within the text. It stores them in a dictionary after processing each key's associated values.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/utils/json_utils.py\":44-83",
            "content": "    return json_string\ndef parse_semi_formatted_json(json_string):\n    obj = None\n    try:\n        response = refine_json(json_string)\n        obj = json.loads(response)\n    except Exception as e:\n        logger.error(f\"Error in processing json: {e}. Object was: {json_string}.\")\n        logger.error_ex(e)\n    return obj\ndef parse_semi_formatted_text(text):\n    lines = text.split('\\n')\n    lines = [line.rstrip() for line in lines if line.rstrip()]\n    result_dict = {}\n    current_key = None\n    current_value = []\n    parsed_data = []\n    in_code_flag = False\n    for line in lines:\n        # Check if the line indicates a new key\n        if line.endswith(\":\") and in_code_flag == False:\n            # If there's a previous key, process its values\n            if current_key and current_key == constants.ACTION_GUIDANCE:\n                result_dict[current_key] = parsed_data\n            elif current_key:\n                result_dict[current_key] = '\\n'.join(current_value).strip()\n            try:\n                current_key = line.rstrip(':').lower()"
        },
        {
            "comment": "This code handles the parsing of JSON data. It checks for the 'Action Guidance' key and identifies code blocks using triple backticks (```). If a code block is found, it stores the code lines in the current_value list. Once a new line with triple backticks is encountered or if the value is null, it processes the previous code block and adds it to parsed_data. Any other keys are not processed and are stored in the current_key variable for further use.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/utils/json_utils.py\":84-109",
            "content": "            except Exception as e:\n                logger.error(f\"Response is not in the correct format: {e}\\nReceived text was: {text}\")\n                raise\n            current_value = []\n            parsed_data = []\n        else:\n            if current_key == constants.ACTION_GUIDANCE:\n                in_code_flag = True\n                if line.strip() == '```':\n                    if current_value:  # Process previous code block and description\n                        entry = {\"code\": '\\n'.join(current_value[1:])}\n                        parsed_data.append(entry)\n                        current_value = []\n                    in_code_flag = False\n                else:\n                    current_value.append(line)\n                    if line.strip().lower() == 'null':\n                        in_code_flag = False\n            else:\n                in_code_flag = False\n                line = line.strip()\n                current_value.append(line)\n    # Process the last key\n    if current_key == constants.ACTION_GUIDANCE:"
        },
        {
            "comment": "This code processes a dictionary containing code blocks and descriptions. If the current value has a description, it creates an entry with the code block stripped of leading/trailing whitespace. The resulting parsed data is appended to a list for the current key in the result dictionary. If the \"actions\" key exists, the code replaces placeholders, removes empty lines, converts all action strings to lowercase, and sets the \"success\" key to True if it equals \"true\", or False otherwise. The processed dictionary is then returned.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/utils/json_utils.py\":110-131",
            "content": "        if current_value:  # Process the last code block and description\n            entry = {\"code\": '\\n'.join(current_value[:-1]).strip()}\n            parsed_data.append(entry)\n        result_dict[current_key] = parsed_data\n    else:\n        result_dict[current_key] = '\\n'.join(current_value).strip()\n    if \"actions\" in result_dict:\n        actions = result_dict[\"actions\"]\n        actions = actions.replace('```python', '').replace('```', '')\n        actions = actions.split('\\n')\n        actions = [action for action in actions if action]\n        actions = [action.split('#')[0] if \"#\" in action else action for action in actions]\n        result_dict[\"actions\"] = actions\n    if \"success\" in result_dict:\n        result_dict[\"success\"] = result_dict[\"success\"].lower() == \"true\"\n    return result_dict"
        }
    ]
}