{
    "summary": "The code defines the `BasicVectorMemory` class for memory management, initializing variables and providing an `add` method to add data. It allows similarity search based on queries and can load/save data from local files using JSON format.",
    "details": [
        {
            "comment": "This code defines the `BasicVectorMemory` class, which inherits from `BaseMemory`. It initializes variables like `storage_filename`, `memory`, `memory_path`, `vectorstores`, and `embedding_provider`. The `__init__` function takes in parameters such as `memory_path`, `vectorstores`, `embedding_provider`, and an optional `memory` parameter. It also has a method called `add` that takes in data in the form of a mapping from unique names to text or images, allowing users to add data to memory.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/memory/basic_vector_memory.py\":0-46",
            "content": "from typing import (\n    List,\n    Dict,\n    Union,\n    Optional,\n)\nimport os\nfrom cradle.config import Config\nfrom cradle.log import Logger\nfrom cradle.provider.base_embedding import EmbeddingProvider\nfrom cradle.memory.base import BaseMemory, Image\nfrom cradle.memory.vector_store import VectorStore\nfrom cradle.utils.json_utils import load_json, save_json\nconfig = Config()\nlogger = Logger()\nclass BasicVectorMemory(BaseMemory):\n    storage_filename = \"vector_memory.json\"\n    def __init__(\n        self,\n        memory_path: str,\n        vectorstores: VectorStore,\n        embedding_provider: EmbeddingProvider,\n        memory: Optional[Dict] = None,\n    ):\n        if memory is None:\n            self.memory: Dict = {}\n        else:\n            self.memory = memory\n        self.memory_path = memory_path\n        self.vectorstores = vectorstores\n        self.embedding_provider = embedding_provider\n    def add(\n        self,\n        data: Dict[str, Union[str, Image]],\n    ) -> None:\n        \"\"\"Add data to memory.\n        Args:\n            data: the mapping from unique name (id) to text/image."
        },
        {
            "comment": "This code initializes a list of embeddings by looping through keys in the data and appending embeddings for each key's description using an embedding provider. It then stores the keys with their associated values in memory, and adds embeddings to the vectorstore for the 'description' index. The `similarity_search` function retrieves keys based on a query and returns top_k results.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/memory/basic_vector_memory.py\":47-81",
            "content": "        \"\"\"\n        keys: List[str] = list(data.keys())\n        embeddings = []\n        for k in keys:\n            embeddings.append(self.embedding_provider.embed_query(data[k][\"description\"]))\n            instruction = data[k][\"instruction\"]\n            screenshot = data[k][\"screenshot\"]\n            timestep = data[k][\"timestep\"]\n            description = data[k][\"description\"]\n            inventory = data[k][\"inventory\"]\n            self.memory[k] = {\n                \"instruction\": instruction,\n                \"screenshot\": screenshot,\n                \"timestep\": timestep,\n                \"description\": description,\n                \"inventory\": inventory,\n            }\n        self.vectorstores['description'].add_embeddings(keys, embeddings)\n    def similarity_search(\n        self,\n        data: Union[str, Image],\n        top_k: int = 3,\n        **kwargs,\n    ) -> List[Union[str, Image]]:\n        \"\"\"Retrieve the keys from the vectorstore.\n        Args:\n            data: the query data.\n            top_k: the number of results to return."
        },
        {
            "comment": "This code defines a class with methods for searching and loading data from memory. The `basic_vector_memory` class provides an embedding-based search function using similarity scores to find relevant results, as well as a method to retrieve recent keys based on their order of addition to the memory. The class also includes a load function that can be used to load data from a given memory path.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/memory/basic_vector_memory.py\":82-119",
            "content": "            **kwargs: Other keyword arguments that subclasses might use.\n        Returns:\n            the corresponding values from the memory.\n        \"\"\"\n        query_embedding = self.embedding_provider.embed_query(data)\n        key_and_score = self.vectorstores['description'].similarity_search(query_embedding, top_k)\n        return [self.memory[k] for k, score in key_and_score]\n    def recent_search(\n        self,\n        recent_k: int = 3,\n        **kwargs,\n    ) -> List[Union[str, Image]]:\n        \"\"\"Retrieve the recent k keys\n        Args:\n            recent_k: the number of results to return.\n            **kwargs: Other keyword arguments that subclasses might use.\n        Returns:\n            the corresponding values of the recent k memory.\n        \"\"\"\n        keys = list(self.memory.keys()) # the order of adding\n        recent_k = min(recent_k,len(keys))\n        return [self.memory[k] for k in keys[len(keys) - recent_k : len(keys)]]\n    def load(self):\n        self.load()\n    def load(\n        cls,\n        memory_path: str,"
        },
        {
            "comment": "This code snippet is a class method for loading and saving memory from/to a local file. The load method takes the memory path and storage filename as parameters, loads the JSON data from the specified file path, creates an instance of BasicVectorMemory with the loaded memory, vectorstore, and embedding_provider, and returns it. The save method saves the memory to a local file with the specified memory path and storage filename using JSON data format. It also calls the save method of the vectorstores instance to save them as well.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/memory/basic_vector_memory.py\":120-138",
            "content": "        vectorstore: VectorStore,\n        embedding_provider: EmbeddingProvider,\n    ) -> \"BasicVectorMemory\":\n        \"\"\"Load the memory from the local file.\"\"\"\n        memory = load_json(os.path.join(cls.memory_path, cls.storage_filename))\n        return cls(\n            memory_path=memory_path,\n            vectorstore=vectorstore,\n            embedding_provider=embedding_provider,\n            memory=memory,\n        )\n    def save(self) -> None:\n        \"\"\"Save the memory to the local file.\"\"\"\n        save_json(file_path = os.path.join(self.memory_path, self.storage_filename), json_dict = self.memory, indent = 4)\n        self.vectorstores.save()"
        }
    ]
}