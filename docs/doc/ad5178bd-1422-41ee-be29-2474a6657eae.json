{
    "summary": "GameManager initializes and manages game processes, offers functions like pausing, switching games, and skill management; includes methods for capturing screenshots, extracting minimaps, and interacting with SkillRegistry.",
    "details": [
        {
            "comment": "This code imports necessary modules and classes, initializes a logger, IO environment, and configuration, and defines the GameManager class. It takes an environment name and an optional embedding provider as parameters in its constructor. The skill_registry is initialized with local path, from local flag, store path, skill scope, and optional embedding provider.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/game_manager.py\":0-28",
            "content": "import time\nfrom typing import Tuple\nfrom cradle.config import Config\nfrom cradle.gameio import IOEnvironment\nfrom cradle.log import Logger\nfrom cradle.gameio.lifecycle.ui_control import take_screenshot, segment_minimap, switch_to_game, pause_game, unpause_game, exit_back_to_pause\nfrom cradle.gameio.composite_skills.navigation import navigate_path\nfrom cradle.gameio.skill_registry import SkillRegistry\nfrom cradle import constants\nconfig = Config()\nlogger = Logger()\nio_env = IOEnvironment()\nclass GameManager:\n    def __init__(\n        self,\n        env_name,\n        embedding_provider = None\n    ):\n        self.env_name = env_name\n        self.skill_registry = SkillRegistry(local_path = config.skill_local_path,\n                                            from_local = config.skill_from_local,\n                                            store_path = config.work_dir,\n                                            skill_scope = config.skill_scope,\n                                            embedding_provider = embedding_provider)"
        },
        {
            "comment": "This code contains functions to pause, unpause, switch to game, exit back to pause, retrieve skills based on query and skill number, filter skill library, add new skill, and delete existing skill. It is likely part of a larger game management system.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/game_manager.py\":31-68",
            "content": "    def pause_game(self, screen_type=constants.GENERAL_GAME_INTERFACE):\n        if screen_type==constants.GENERAL_GAME_INTERFACE or screen_type==constants.PAUSE_INTERFACE or screen_type==constants.RADIAL_INTERFACE:\n            pause_game()\n    def unpause_game(self):\n        unpause_game()\n    def switch_to_game(self):\n        switch_to_game()\n    def exit_back_to_pause(self):\n        exit_back_to_pause()\n    def get_skill_information(self, skill_list):\n        filtered_skill_library = []\n        for skill_name in skill_list:\n            skill_item = self.skill_registry.get_from_skill_library(skill_name)\n            filtered_skill_library.append(skill_item)\n        return filtered_skill_library\n    def add_new_skill(self, skill_code, overwrite = True):\n        return self.skill_registry.register_skill_from_code(skill_code = skill_code, overwrite = overwrite)\n    def delete_skill(self, skill_name):\n        self.skill_registry.delete_skill(skill_name)\n    def retrieve_skills(self, query_task, skill_num, screen_type):"
        },
        {
            "comment": "The code defines a GameManager class, which interacts with SkillRegistry to retrieve skills, register available skills, and get skill library in code. The execute_navigation function executes navigation action with a total time step of 500ms. The execute_actions function handles the execution of actions passed as a parameter and updates the executed skills list and handles errors if any.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/game_manager.py\":69-107",
            "content": "        return self.skill_registry.retrieve_skills(query_task, skill_num, screen_type)\n    def register_available_skills(self, candidates):\n        self.skill_registry.register_available_skills(candidates)\n    def get_skill_library_in_code(self, skill) -> Tuple[str, str]:\n        return self.skill_registry.get_skill_library_in_code(skill)\n    def execute_navigation(self, action):\n        # Execute action\n        total_time_step = 500\n        if action == \"navigate_path\":\n            time.sleep(2)\n            navigate_path(total_time_step)\n    def execute_actions(self, actions):\n        exec_info = {\n            \"executed_skills\" : [],\n            \"last_skill\" : '',\n            \"errors\" : False,\n            \"errors_info\": \"\"\n        }\n        io_env.update_timeouts()\n        if actions is None or len(actions) == 0 or actions == '' or actions[0] == '':\n            logger.warn(f\"No actions to execute! Executing nop.\")\n            self.skill_registry.execute_nop_skill()\n            exec_info[\"errors\"] = True\n            exec_info[\"errors_info\"] = \"No actions to execute!\""
        },
        {
            "comment": "This code handles the execution of skills based on expressions. It iterates through each skill in the actions list, converts it to a skill name and params, then executes it using the SkillRegistry class. If the skill name is a composite skill from the config's ocr_check_composite_skill_names, it toggles the OCR enable status based on the config's ocr_fully_ban setting. If the skill contains \"navigate\", it calls execute_navigation function. The executed skills are appended to the exec_info dictionary.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/game_manager.py\":108-134",
            "content": "            return exec_info\n        skill_name = '-'\n        skill_params = '-'\n        try:\n            for skill in actions:\n                skill_name, skill_params = self.skill_registry.convert_expression_to_skill(skill)\n                logger.write(f\"Executing skill: {skill_name} with params: {skill_params}\")\n                # Enable OCR for composite skills, start the ocr check\n                if skill_name in config.ocr_check_composite_skill_names:\n                    if not config.ocr_fully_ban:\n                        config.ocr_different_previous_text = False\n                        config.enable_ocr = True\n                    else:\n                        config.ocr_different_previous_text = False\n                        config.enable_ocr = False\n                if \"navigate\" in skill_name:\n                    self.execute_navigation(skill_name)\n                else:\n                    self.skill_registry.execute_skill(name=skill_name, params=skill_params)\n                exec_info[\"executed_skills\"].append(skill)"
        },
        {
            "comment": "This code snippet defines a game manager class with methods for executing skills, waiting after an action, capturing screenshots, extracting minimap from the screenshot, and listing session screenshots. The post_action_wait() method adds a wait time after each action, while the capture_screen() method takes a screenshot with or without minimap. The extract_minimap() method extracts the minimap from a provided screenshot path. Lastly, the list_session_screenshots() method lists screenshots in a specified session directory.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/game_manager.py\":135-167",
            "content": "                exec_info[\"last_skill\"] = skill\n                self.post_action_wait()\n                logger.write(f\"Finished executing skill: {skill} and wait.\")\n        except Exception as e:\n            msg = f'Error executing skill {skill_name} with params {skill_params} (from actions: {actions}):\\n{e}'\n            logger.error(msg)\n            exec_info[\"errors\"] = True\n            exec_info[\"errors_info\"] = msg\n        # @TODO re-add hold timeout check call\n        return exec_info\n    # Currently all actions have wait in them, if needed\n    def post_action_wait(self):\n        #time.sleep(config.DEFAULT_POST_ACTION_WAIT_TIME)\n        time.sleep(1)\n    def capture_screen(self, include_minimap = False):\n        tid = time.time()\n        return take_screenshot(tid, include_minimap=include_minimap)\n    def extract_minimap(self, screenshot_path):\n        return segment_minimap(screenshot_path)\n    def list_session_screenshots(self, session_dir: str = config.work_dir):\n        return io_env.list_session_screenshots(session_dir)"
        },
        {
            "comment": "The `store_skills` method saves the skills to the skill registry, while the `cleanup_io` function releases held keys and buttons in the IO environment.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/game_manager.py\":170-176",
            "content": "    def store_skills(self):\n        self.skill_registry.store_skills()\n    def cleanup_io(self):\n        io_env.release_held_keys()\n        io_env.release_held_buttons()"
        }
    ]
}