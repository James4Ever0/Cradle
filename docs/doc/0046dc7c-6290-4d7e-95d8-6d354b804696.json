{
    "summary": "This code manages inputs, logs warnings, and handles game events using AutoHotkey for mouse actions and pydirectinput for key input. It includes screenshots, mouse normalization, coordinate conversion, aliasing, mapping, handling special keys, and adjusting theta based on mouse move factor configuration.",
    "details": [
        {
            "comment": "This code imports necessary modules and defines custom structures for handling keyboard, mouse, and hardware input. It also creates a union structure to handle different types of inputs.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/io_env.py\":0-54",
            "content": "from typing import (\n    Any,\n    Dict,\n    List,\n    Tuple,\n)\nimport os\nimport time\nimport ctypes\nfrom ahk import AHK\nimport pydirectinput\nfrom cradle.utils import Singleton\nfrom cradle.config import Config\nfrom cradle.log import Logger\nconfig = Config()\nlogger = Logger()\nPUL = ctypes.POINTER(ctypes.c_ulong)\nclass KeyBdInput(ctypes.Structure):\n    _fields_ = [\n        (\"wVk\", ctypes.c_ushort),\n        (\"wScan\", ctypes.c_ushort),\n        (\"dwFlags\", ctypes.c_ulong),\n        (\"time\", ctypes.c_ulong),\n        (\"dwExtraInfo\", PUL),\n    ]\nclass HardwareInput(ctypes.Structure):\n    _fields_ = [\n        (\"uMsg\", ctypes.c_ulong),\n        (\"wParamL\", ctypes.c_short),\n        (\"wParamH\", ctypes.c_ushort),\n    ]\nclass MouseInput(ctypes.Structure):\n    _fields_ = [\n        (\"dx\", ctypes.c_long),\n        (\"dy\", ctypes.c_long),\n        (\"mouseData\", ctypes.c_ulong),\n        (\"dwFlags\", ctypes.c_ulong),\n        (\"time\", ctypes.c_ulong),\n        (\"dwExtraInfo\", PUL),\n    ]\nclass Input_I(ctypes.Union):\n    _fields_ = [(\"ki\", KeyBdInput), (\"mi\", MouseInput), (\"hi\", HardwareInput)]"
        },
        {
            "comment": "This code defines classes and constants for handling game input and environment interaction. It includes constants for different types of mouse buttons, key interactions, and time durations for various actions. The code also sets default values for these parameters.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/io_env.py\":57-93",
            "content": "class Input(ctypes.Structure):\n    _fields_ = [(\"type\", ctypes.c_ulong), (\"ii\", Input_I)]\nclass IOEnvironment(metaclass=Singleton):\n    \"\"\"\n    Wrapper for resources to interact with the game to make sure they're available where needed and multiple instances are not created.\n    \"\"\"\n    # Windows API constants\n    MOUSEEVENTF_MOVE = 0x0001\n    MOUSEEVENTF_ABSOLUT = 0x8000\n    WIN_NORM_MAX = 65536 # int max val\n    # Constants\n    RIGHT_MOUSE_BUTTON = 'Right'\n    LEFT_MOUSE_BUTTON = 'Left'\n    MIDDLE_MOUSE_BUTTON = 'Middle'\n    right_mouse_button = RIGHT_MOUSE_BUTTON\n    left_mouse_button = LEFT_MOUSE_BUTTON\n    middle_mouse_button = MIDDLE_MOUSE_BUTTON\n    WHEEL_UP_MOUSE_BUTTON = 'WU'\n    WHEEL_DOWN_MOUSE_BUTTON = 'WD'\n    MIN_DURATION = 2 # In seconds\n    HOLD_DEFAULT_BLOCK_TIME = 2\n    RELEASE_DEFAULT_BLOCK_TIME = 0.5\n    MAX_ITERATIONS = 3\n    KEY_KEY = 'key'\n    BUTTON_KEY = 'button'\n    EXPIRATION_KEY = 'expiration'\n    # All key interactions are now tracked and use the same calling structure\n    # - Release is equivalent to keyUp. I.e., release a key that was pressed or held."
        },
        {
            "comment": "This code initializes an IO environment class, defines actions as press and hold for keys and release for buttons, and manages held_keys and held_buttons lists for key releases or timeout. A backup list is used due to pause issues in RDR2. The code uses AHK (AutoHotkey) and PyDirectInput for key pressing but not mouse checks.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/io_env.py\":94-123",
            "content": "    # - Hold is equivalent to keyDown. I.e., hold a key for a certain duration, probably while something else happens.\n    # - Press is equivalent to keyDown followed by keyUp, after a delay. I.e., press a key for a short duration.\n    ACTION_PRESS = 'press' # Equivalent to click on the mouse\n    ACTION_HOLD = 'hold'\n    ACTION_RELEASE = 'release'\n    MOUSE_TYPE = 'is_mouse'\n    KEY_TYPE = 'is_keyboard'\n    # List of keys currently held. To be either released by specific calls or after timeout (max iterations).\n    # {\n    #     self.KEY_KEY: key,\n    #     self.EXPIRATION_KEY: self.MAX_ITERATIONS\n    # }\n    held_keys = []\n    held_buttons = []\n    # Used currently due to an issue with pause in RDR2\n    backup_held_keys = []\n    backup_held_buttons = []\n    def __init__(self) -> None:\n        \"\"\"Initialize the IO environment class\"\"\"\n        self.ahk = AHK()\n        #PyDirectInput is only used for key pressing, so no need for mouse checks\n        pydirectinput.FAILSAFE = False\n    def pop_held_button(self, button):"
        },
        {
            "comment": "The code handles mouse button events (up and down) and manages a list of held buttons. The `_mouse_button_up` function removes the corresponding button from the held list, sleeps for a default release time, and sends a release message. The `put_held_button` function checks if the button is already being held, adds it to the held list with an expiration timestamp, performs a mouse button down action, sleeps for a default hold time, and sends a hold message.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/io_env.py\":125-159",
            "content": "        self._mouse_button_up(button)\n        # Remove from held list\n        for i in range(len(self.held_buttons)):\n            if self.held_buttons[i][self.BUTTON_KEY] == button:\n                self.held_buttons.pop(i)\n                break\n        time.sleep(self.RELEASE_DEFAULT_BLOCK_TIME)\n        self._to_message(self.held_buttons, self.ACTION_RELEASE, self.MOUSE_TYPE)\n    def put_held_button(self, button):\n        for e in self.held_buttons:\n            if e[self.BUTTON_KEY] == button:\n                logger.warn(f'Button {button} already being held.')\n                return\n        else:\n            entry = {\n                self.BUTTON_KEY: button,\n                self.EXPIRATION_KEY: self.MAX_ITERATIONS\n            }\n            self.held_buttons.append(entry)\n            self._mouse_button_down(button)\n            time.sleep(self.HOLD_DEFAULT_BLOCK_TIME)\n            self._to_message(self.held_buttons, self.ACTION_HOLD, self.MOUSE_TYPE)\n    def _mouse_button_down(self, button):\n        self.ahk.click(button=button, direction='D')"
        },
        {
            "comment": "This code contains several functions for handling key inputs in a game environment. The `_mouse_button_up` function handles mouse button releases, `pop_held_keys` pops held keys when released, `put_held_keys` adds new keys to be held, and all these operations send messages to the system.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/io_env.py\":162-195",
            "content": "    def _mouse_button_up(self, button):\n        self.ahk.click(button=button, direction='U')\n    def pop_held_keys(self, key):\n        if self.check_held_keys(keys = [key]):\n            pydirectinput.keyUp(key)\n            time.sleep(self.RELEASE_DEFAULT_BLOCK_TIME)\n            self.held_keys.pop()\n        else:\n            pydirectinput.keyUp(key) # Just as a guarantee to up an untracked key\n            logger.warn(f'Key {key} was not being held at top.')\n        self._to_message(self.held_keys, self.ACTION_RELEASE, self.KEY_TYPE)\n    def put_held_keys(self, key):\n        top_key = _safe_list_get(self.held_keys, -1, self.KEY_KEY)\n        if key == top_key:\n            logger.warn(f'Key {key} already being held.')\n        else:\n            entry = {\n                self.KEY_KEY: key,\n                self.EXPIRATION_KEY: self.MAX_ITERATIONS\n            }\n            self.held_keys.append(entry)\n            pydirectinput.keyDown(key)\n            time.sleep(self.HOLD_DEFAULT_BLOCK_TIME)\n            self._to_message(self.held_keys, self.ACTION_HOLD, self.KEY_TYPE)"
        },
        {
            "comment": "The code contains functions to check if any keys are being held, convert a list of events into a message format, and update the timeout for held keys. It also logs warnings when a key is released due to reaching its timeout.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/io_env.py\":198-238",
            "content": "    def check_held_keys(self, keys):\n        result = False\n        if keys is not None and len(keys) != 0:\n            for e in self.held_keys:\n                k = e[self.KEY_KEY]\n                if k in keys:\n                    result = True\n                    break\n        return result\n    def _to_message(self, list, purpose, type):\n        if type == self.KEY_TYPE:\n            vals = ', '.join(f'{e[self.KEY_KEY]}:{e[self.EXPIRATION_KEY]}' for e in list)\n            msg = f'Held keys after {purpose}: {vals}'\n        elif type == self.MOUSE_TYPE:\n            vals = ', '.join(f'{e[self.BUTTON_KEY]}:{e[self.EXPIRATION_KEY]}' for e in list)\n            msg = f'Held button after {purpose}: {vals}'\n        logger.write(msg)\n        return msg\n    def update_timeouts(self):\n        if self.held_keys is None or len(self.held_keys) == 0:\n            return\n        tmp_list = []\n        for e in self.held_keys:\n            t = e[self.EXPIRATION_KEY] - 1\n            if t <= 0:\n                key = e[self.KEY_KEY]\n                logger.warn(f'Releasing key {key} after timeout.')"
        },
        {
            "comment": "This code handles key and mouse button timeouts. It releases keys after their expiration time and checks if any held buttons have timed out, logging a warning and releasing the mouse button with a delay. The function also clears held_keys and held_buttons lists at the end.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/io_env.py\":239-276",
            "content": "                pydirectinput.keyUp(key)\n                time.sleep(0.1)\n            else:\n                e[self.EXPIRATION_KEY] = t\n                tmp_list.append(e)\n        self.held_keys = tmp_list.copy()\n        del tmp_list\n        tmp_list = []\n        for e in self.held_buttons:\n            t = e[self.EXPIRATION_KEY] - 1\n            if t <= 0:\n                button = e[self.BUTTON_KEY]\n                logger.warn(f'Releasing mouse button {button} after timeout.')\n                self._mouse_button_up(button)\n                time.sleep(0.1)\n            else:\n                e[self.EXPIRATION_KEY] = t\n                tmp_list.append(e)\n        self.held_buttons = tmp_list.copy()\n        del tmp_list\n    def handle_hold_in_pause(self):\n        self.backup_held_keys = self.held_keys.copy()\n        if self.backup_held_keys is not None and self.backup_held_keys != []:\n            for e in self.backup_held_keys:\n                pydirectinput.keyUp(e[self.KEY_KEY])\n        self.held_keys = []\n        self.backup_held_buttons = self.held_buttons.copy()"
        },
        {
            "comment": "This code handles holding down buttons and keys in a game environment by backing up the held states, simulating the hold for 1 second, and then clearing the backup.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/io_env.py\":277-309",
            "content": "        if self.backup_held_buttons is not None and self.backup_held_buttons != []:\n            for e in self.backup_held_buttons:\n                self._mouse_button_up(e[self.BUTTON_KEY])\n        self.held_buttons = []\n    def handle_hold_in_unpause(self):\n        buttons_hold = False\n        keys_hold = False\n        if self.backup_held_buttons is not None and self.backup_held_buttons != []:\n            for e in self.backup_held_buttons:\n                self._mouse_button_down(e[self.BUTTON_KEY])\n            buttons_hold = True\n            self.held_buttons = self.backup_held_buttons.copy()\n        time.sleep(.1)\n        if self.backup_held_keys is not None and self.backup_held_keys != []:\n            for e in self.backup_held_keys:\n                pydirectinput.keyDown(e[self.KEY_KEY])\n            keys_hold = True\n            self.held_keys = self.backup_held_keys.copy()\n        if buttons_hold or keys_hold:\n            time.sleep(1)\n    def list_session_screenshots(self, session_dir: str = config.work_dir):"
        },
        {
            "comment": "Code snippet contains three functions: \n1. `screenshots` - lists and sorts files in a directory named \"screen\" based on their creation time.\n2. `mouse_move_normalized` - takes x, y coordinates to move the mouse, allowing for normalized (0-1) game coordinates or absolute screen coordinates with optional relative/from center parameters.\n3. `_mouse_coord_to_abs_win` - converts mouse coordinates to absolute window coordinates based on the given width or height.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/io_env.py\":311-341",
            "content": "        # List all files in dir starting with \"screen\"\n        screenshots = [f for f in os.listdir(session_dir) if os.path.isfile(os.path.join(session_dir, f)) and f.startswith(\"screen\")]\n        # Sort list by creation time\n        screenshots.sort(key=lambda x: os.path.getctime(os.path.join(session_dir, x)))\n        return screenshots\n    def mouse_move_normalized(self, x, y, relative = False, from_center = False):\n        logger.debug(f'noormalized game coord x {x} y {y} relative {relative} fc {from_center}')\n        w, h = config.game_resolution\n        offset = 0\n        if from_center is True:\n            offset = .5 # Center of the game screen in normalized coordinates\n        gx = int((x-offset) * w)\n        gy = int((y-offset) * h)\n        self.mouse_move(x = gx, y = gy, relative = relative)\n    def _mouse_coord_to_abs_win(self, coord, width_or_height):\n        abs_coord = ((self.WIN_NORM_MAX * coord) / width_or_height) + (-1 if coord < 0 else 1)\n        return int(abs_coord)\n    # If either relative or not, always pass in-game coordinates"
        },
        {
            "comment": "This code implements the `mouse_move` function, which handles mouse movement events. It also includes a separate `mouse_move_horizontal_angle` function. The implementation is not fully functional and focuses on addressing game-category specific issues first. If relative mouse movement is specified, it calculates the absolute Windows coordinates based on screen resolution. The code uses C types and functions from the ctypes library for input handling and sends input using SendInput from user32 module.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/io_env.py\":342-370",
            "content": "    # This implementation is not fully functional and was intended to address game-category specific issues first\n    def mouse_move(self, x, y, relative=False):\n        extra = ctypes.c_ulong(0)\n        ii_ = Input_I()\n        logger.debug(f'game coord x {x} y {y} relative {relative}')\n        event_flag = self.MOUSEEVENTF_MOVE\n        if relative is False:\n            event_flag = self.MOUSEEVENTF_ABSOLUT | self.MOUSEEVENTF_MOVE\n            corner = config.game_region\n            x = x + corner[0]\n            y = y + corner[1]\n            logger.debug(f'screen x {x} y {y}')\n            x = self._mouse_coord_to_abs_win(x, config.screen_resolution[0])\n            y = self._mouse_coord_to_abs_win(y, config.screen_resolution[1])\n            logger.debug(f'windows x {x} y {y}')\n        ii_.mi = MouseInput(int(x), int(y), 0, event_flag, 0, ctypes.pointer(extra))\n        command = Input(ctypes.c_ulong(0), ii_)\n        ctypes.windll.user32.SendInput(1, ctypes.pointer(command), ctypes.sizeof(command))\n    def mouse_move_horizontal_angle(self, theta):"
        },
        {
            "comment": "The code defines methods for mouse actions such as move, click, hold, and release. The methods handle different cases of duration (None or specified) and the number of clicks/button presses. It uses AutoHotkey library to perform these actions on the computer's UI.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/io_env.py\":371-412",
            "content": "        distance = _theta_calculation(theta)\n        self.mouse_move(distance, 0, relative=True)\n    def mouse_click(self, button, duration = None, clicks=1):\n        self.mouse_click_button(button, duration, clicks)\n    def mouse_click_button(self, button, duration = None, clicks=1):\n        button = self.map_button(button)\n        if duration is None:\n            self.ahk.click(click_count=clicks, button=button, relative=False)\n        else:\n            self._mouse_button_down(button)\n            time.sleep(duration)\n            self._mouse_button_up(button)\n    def mouse_hold(self, button, duration = None):\n        if duration is None:\n            self.mouse_hold_button(button)\n        else:\n            self._mouse_button_down(button)\n            time.sleep(duration)\n            self._mouse_button_up(button)\n    def mouse_hold_button(self, button):\n        button = self.map_button(button)\n        self.put_held_button(button)\n    def mouse_release(self, button):\n        self.mouse_release_button(button)\n    def mouse_release_button(self, button):"
        },
        {
            "comment": "Function map_button called to map the button, and then pop_held_button is used to remove it. get_mouse_position returns x and y coordinates from ahk. get_mouse_position(). clip_check_horizonal_angle checks if angle pixels are within resolution bounds. _check_multi_key checks if input contains multiple keys, returning True/False with the key(s) if it does.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/io_env.py\":414-452",
            "content": "        button = self.map_button(button)\n        self.pop_held_button(button)\n    def get_mouse_position(self) -> Tuple[int, int]:\n        return self.ahk.get_mouse_position()\n    def clip_check_horizonal_angle(self, theta):\n        result = False\n        pixels = _theta_calculation(theta)\n        mx, _ = self.get_mouse_position()\n        if pixels > 0 and mx + pixels > config.game_resolution[0]:\n            result = True\n        elif pixels < 0 and mx + pixels < 0:\n            result = True\n        return result\n    def _check_multi_key(self, input):\n        if input is not None and len(input) > 1:\n            if type(input) is list:\n                return (True, input)\n            else:\n                key_tokens = input.split(',')\n                keys = []\n                for k in key_tokens:\n                    k = k.strip()\n                    if k != '':\n                        k = self.map_key(k)\n                        keys.append(k)\n                if len(keys) == 0:\n                    return (False, None)"
        },
        {
            "comment": "This code handles key input in different scenarios. If there's only one key, it returns (False, key). Otherwise, it returns (True, keys) or (False, None) if the storage is empty. The _multi_key_action function performs actions on each key in order, releases them in reverse, and can take a duration argument for waiting before releasing the keys. It also includes a check to ensure the action parameter is valid and warns if it's not.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/io_env.py\":453-487",
            "content": "                elif len(keys) == 1:\n                    return (False, keys[0])\n                else:\n                    return (True, keys)\n        else:\n            return (False, None)\n    # Special function to facilitate multi-key combos from GPT-4V like \"io_env.key_hold('w,space')\", which are commonly generated\n    def _multi_key_action(self, keys, action, duration = 2):\n        actions = [self.ACTION_PRESS, self.ACTION_HOLD, self.ACTION_RELEASE]\n        if action not in actions:\n            logger.warn(f'Invalid action: {action}. Ignoring it.')\n        # Act in order, release in reverse\n        for key in keys:\n            # Special case to facilitate multi-key combos\n            if key != keys[-1]:\n                action = self.ACTION_HOLD\n            if action == self.ACTION_PRESS:\n                self.key_press(key)\n            elif action == self.ACTION_HOLD:\n                self.key_hold(key)\n        if duration is None:\n            duration = 0.3\n        time.sleep(duration)\n        for key in reversed(keys):"
        },
        {
            "comment": "The code defines three methods: 'key_release', 'key_press', and 'key_hold'. These methods handle key events in the context of a game. The 'key_release' method is responsible for releasing keys, while 'key_press' and 'key_hold' are for pressing and holding keys, respectively. The code also handles multi-key actions, and interacts with the 'pydirectinput' library to perform key actions on the system.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/io_env.py\":488-526",
            "content": "            self.key_release(key)\n    def key_press(self, key, duration=None):\n        if key in self.ALIASES_MOUSE_REDIRECT:\n            self.mouse_click_button(key, duration)\n        key = self.map_key(key)\n        f, keys = self._check_multi_key(key)\n        if f == True:\n            self._multi_key_action(keys, self.ACTION_PRESS, duration)\n        else:\n            if duration is None:\n                pydirectinput.keyDown(key)\n                time.sleep(.2)\n                pydirectinput.keyUp(key)\n            else:\n                pydirectinput.keyDown(key)\n                time.sleep(duration)\n                pydirectinput.keyUp(key)\n    def key_hold(self, key, duration=None):\n        if key in self.ALIASES_MOUSE_REDIRECT:\n            self.mouse_hold_button(key, duration)\n        key = self.map_key(key)\n        f, keys = self._check_multi_key(key)\n        if f == True:\n            self._multi_key_action(keys, self.ACTION_HOLD, duration)\n        else:\n            if duration is not None:\n                pydirectinput.keyDown(key)"
        },
        {
            "comment": "The code defines functions for handling key releases in a game input environment. The `key_release` function handles mouse button releases, the `release_held_keys` function clears the list of held keys, and the `release_held_buttons` function releases all held buttons. The code also includes aliases for left, right, center mouse buttons, and corresponding mouse actions.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/io_env.py\":527-555",
            "content": "                time.sleep(duration)\n                pydirectinput.keyUp(key)\n            else:\n                self.put_held_keys(key)\n    def key_release(self, key):\n        if key in self.ALIASES_MOUSE_REDIRECT:\n            self.mouse_release_button(key)\n        key = self.map_key(key)\n        self.pop_held_keys(key)\n    def release_held_keys(self):\n        for i in range(len(self.held_keys)):\n            self.held_keys.pop()\n    def release_held_buttons(self):\n        for i in range(len(self.held_buttons)):\n            self._mouse_button_up(self.held_buttons[i][self.BUTTON_KEY])\n    ALIASES_RIGHT_MOUSE = ['right', 'rightbutton', 'rightmousebutton', 'r', 'rbutton', 'rmouse', 'rightmouse', 'rm', 'mouseright', 'mouserightbutton']\n    ALIASES_LEFT_MOUSE = ['left', 'leftbutton', 'leftmousebutton', 'l', 'lbutton', 'lmouse', 'leftmouse', 'lm', 'mouseleft', 'mouseleftbutton']\n    ALIASES_CENTER_MOUSE = ['middle', 'middelbutton', 'middlemousebutton', 'm', 'mbutton', 'mmouse', 'middlemouse', 'center', 'c', 'centerbutton', 'centermouse', 'cm', 'mousecenter', 'mousecenterbutton']"
        },
        {
            "comment": "This code maps mouse button and keyboard inputs to their respective IO identifiers. It creates sets of aliases for right, left, and center mouse buttons, as well as specific keyboard shift and alt keys. The `map_button` function takes a string input representing the button or key and returns its corresponding identifier based on the provided aliases. If an empty or invalid input is given, it logs an error and raises an exception.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/io_env.py\":556-582",
            "content": "    ALIASES_MOUSE_REDIRECT = set(ALIASES_RIGHT_MOUSE + ALIASES_LEFT_MOUSE + ALIASES_CENTER_MOUSE) - set(['r', 'l', 'm', 'c'])\n    # @TODO mapping can be improved\n    def map_button(self, button):\n        if button is None or button == '':\n            logger.error('Empty Button.')\n            raise Exception(f'Empty mouse button IO: {button}')\n        if len(button) > 1:\n            button = button.lower().replace('_', '').replace(' ', '')\n        if button in self.ALIASES_RIGHT_MOUSE:\n            return self.RIGHT_MOUSE_BUTTON\n        elif button in self.ALIASES_LEFT_MOUSE:\n            return self.LEFT_MOUSE_BUTTON\n        elif button in self.ALIASES_CENTER_MOUSE:\n            return self.MIDDLE_MOUSE_BUTTON\n        return button\n    ALIASES_RIGHT_SHIFT_KEY = ['rshift', 'right shift', 'rightshift', 'shift right', 'shiftright']\n    ALIASES_LEFT_SHIFT_KEY = ['lshift', 'left shift', 'leftshift', 'shift left', 'shiftleft']\n    ALIASES_SHIFT_KEY = ALIASES_RIGHT_SHIFT_KEY + ALIASES_LEFT_SHIFT_KEY\n    ALIASES_RIGHT_ALT_KEY = ['ralt', 'right alt', 'rightalt', 'alt right', 'altright']"
        },
        {
            "comment": "This code defines aliases for various keyboard keys and then maps the given key to its alias. If the key is empty, it logs an error and raises an exception. It preprocesses the key by converting it to lowercase, removing underscores, and hyphens if applicable.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/io_env.py\":583-604",
            "content": "    ALIASES_LEFT_ALT_KEY = ['lalt', 'left alt', 'leftalt', 'alt left', 'altleft']\n    ALIASES_ALT_KEY = ALIASES_RIGHT_ALT_KEY + ALIASES_LEFT_ALT_KEY\n    ALIASES_RIGHT_CONTROL_KEY = ['rctrl', 'right ctrl', 'rightctrl', 'ctrl right', 'ctrlright', 'rcontrol', 'right control', 'rightcontrol', 'control right', 'contorlright']\n    ALIASES_LEFT_CONTROL_KEY = ['lctrl', 'left ctrl', 'leftctrl', 'ctrl left', 'ctrlleft', 'lcontrol', 'left control', 'leftcontrol', 'control left', 'contorlleft']\n    ALIASES_CONTROL_KEY = ALIASES_RIGHT_CONTROL_KEY + ALIASES_LEFT_CONTROL_KEY\n    ALIASES_SPACE_KEY = [' ', 'whitespace', 'spacebar', 'space bar']\n    # @TODO mapping can be improved\n    def map_key(self, key):\n        if key is None or key == '':\n            logger.error('Empty key.')\n            raise Exception(f'Empty key IO: {key}')\n        if len(key) > 1:\n            key = key.lower().replace('_', '').replace('-', '')\n        elif len(key) == 1:\n            key = key.lower()\n        if key in self.ALIASES_LEFT_SHIFT_KEY:"
        },
        {
            "comment": "The code snippet defines a function that returns the corresponding key name for a given key. It handles special keys like shift, alt, ctrl, and space. There is also a separate function for calculating an adjusted theta value based on mouse move factor configuration. Lastly, there is a utility function to safely get values from lists using index and key.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/io_env.py\":605-639",
            "content": "            return 'shift'\n        elif key in self.ALIASES_RIGHT_SHIFT_KEY:\n            return 'shift'\n        if key in self.ALIASES_LEFT_ALT_KEY:\n            return 'alt'\n        elif key in self.ALIASES_RIGHT_ALT_KEY:\n            return 'alt'\n        if key in self.ALIASES_LEFT_CONTROL_KEY:\n            return 'ctrl'\n        elif key in self.ALIASES_RIGHT_CONTROL_KEY:\n            return 'ctrl'\n        if key in self.ALIASES_SPACE_KEY:\n            return 'space'\n        return key\ndef _theta_calculation(theta):\n    \"\"\"\n    Calculates the adjusted theta value based on the configured mouse move factor.\n    Parameters:\n    - theta: The original theta value to be adjusted.\n    \"\"\"\n    return theta * (150 / 9)\ndef _safe_list_get(list, idx, key = None, default = None):\n    try:\n        return list[idx][key]\n    except IndexError:\n        return default"
        }
    ]
}