{
    "summary": "This code imports libraries, defines a class for importing images and includes functions to extract or detect text from video frames using OpenCV. It creates an object, runs the detect_text function on two image files, logs results and average execution time.",
    "details": [
        {
            "comment": "This code imports necessary libraries and defines a class VideoEasyOCRExtractor. The class initializes an EasyOCR reader with the English language and stores the default crop region configuration. The to_images method takes input data, checks its type, and converts it into images for OCR processing if needed. It supports different types of input including image paths, Image objects, numpy arrays, and base64 encoded strings.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/video/VideoEasyOCRExtractor.py\":0-43",
            "content": "import os\nfrom typing import Any, List, Tuple\nimport time\nimport numpy as np\nimport cv2\nimport easyocr\nimport PIL\nfrom PIL import Image\n# Hack to avoid EasyOCR crash\nPIL.Image.ANTIALIAS = PIL.Image.LANCZOS\nfrom cradle.log import Logger\nfrom cradle.config import Config\nfrom cradle.provider.openai import decode_image\nfrom cradle.utils.file_utils import assemble_project_path\nlogger = Logger()\nconfig = Config()\nclass VideoEasyOCRExtractor():\n    def __init__(self):\n        self.crop_region = config.DEFAULT_OCR_CROP_REGION\n        self.reader = easyocr.Reader(['en'])\n    def to_images(self, data: Any) -> Any:\n        images = []\n        if isinstance(data, (str, Image.Image, np.ndarray, bytes)):\n            data = [data]\n        for image in data:\n            if isinstance(image, str): # path to cv2 image\n                if os.path.exists(assemble_project_path(image)):\n                    path = assemble_project_path(image)\n                    image = cv2.imread(path)\n                else: # base64 to cv2 image\n                    image_data = decode_image(image)"
        },
        {
            "comment": "This code segment is responsible for handling image inputs in various formats and converting them to OpenCV format, cropping if necessary, and appending to a list of images. The extracted text from these images will be processed subsequently.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/video/VideoEasyOCRExtractor.py\":44-67",
            "content": "                    image = cv2.imdecode(np.frombuffer(image_data, np.uint8), cv2.IMREAD_COLOR)\n            elif isinstance(image, bytes):  # bytes to cv2 image\n                image = cv2.imdecode(np.frombuffer(image, np.uint8), cv2.IMREAD_COLOR)\n            elif isinstance(image, Image.Image):  # PIL to cv2 image\n                image = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)\n            elif isinstance(image, np.ndarray):  # cv2 image\n                if len(image.shape) == 3 and image.shape[2] == 4:\n                    image = cv2.cvtColor(image, cv2.COLOR_BGRA2BGR)\n            # crop the image\n            if self.crop_region is not None:\n                x1, y1, x2, y2 = self.crop_region\n                image = image[y1:y2, x1:x2]\n            images.append(image)\n        return images\n    def extract_text(self, image: Any, return_full: int = 1) -> List[Any]:\n        images = self.to_images(image)\n        res = []\n        for image in images:\n            # if full, return the (bounding box, text, prob) tuple"
        },
        {
            "comment": "The code defines three functions: `extract_text_from_video`, `extract_text_from_frames`, and `detect_text`. The first function reads text from a video file, the second extracts text from a list of frames, and the third detects text in an image. The extracted or detected text is returned as a list.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/video/VideoEasyOCRExtractor.py\":68-101",
            "content": "            # else, return text only\n            item = self.reader.readtext(image, detail=return_full)\n            res.append(item)\n        return res\n    def extract_text_from_video(self, video_path: str, return_full: int = 1) -> List[Any]:\n        cap = cv2.VideoCapture(video_path)\n        frames = []\n        while cap.isOpened():\n            ret, frame = cap.read()\n            if ret:\n                frames.append(frame)\n            else:\n                break\n            # Break the loop with 'q' key\n            if cv2.waitKey(1) & 0xFF == ord('q'):\n                break\n        cap.release()\n        cv2.destroyAllWindows()\n        res = self.extract_text(frames, return_full=return_full)\n        return res\n    def extract_text_from_frames(self, frames: List, return_full: int = 1) -> List[Any]:\n        res = self.extract_text(frames, return_full=return_full)\n        return res\n    def detect_text(self, image: Any) -> Tuple[List[Any], List[bool]]:\n        images = self.to_images(image)\n        bounding_boxes = []"
        },
        {
            "comment": "This code uses OpenCV and a detector to extract text from video frames. It reads the video, detects text within each frame using the provided detector, and returns bounding boxes for detected text and a flag for each frame indicating whether it contains any text.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/video/VideoEasyOCRExtractor.py\":102-135",
            "content": "        for image in images:\n            item = self.reader.detect(image)\n            item = item[0][0] # list of bounding boxes, (x, y, w, h)\n            bounding_boxes.append(item)\n        has_text_flag = [True if len(item) >0 else False for item in bounding_boxes ]\n        return bounding_boxes, has_text_flag\n    def detect_text_from_video(self, video_path: str) -> Tuple[List[Any], List[bool]]:\n        cap = cv2.VideoCapture(video_path)\n        frames = []\n        while cap.isOpened():\n            ret, frame = cap.read()\n            if ret:\n                frames.append(frame)\n            else:\n                break\n            # Break the loop with 'q' key\n            if cv2.waitKey(1) & 0xFF == ord('q'):\n                break\n        cap.release()\n        cv2.destroyAllWindows()\n        bounding_boxes, has_text_flag = self.detect_text(frames)\n        return bounding_boxes, has_text_flag\n    def detect_text_from_frames(self, frames: List) -> Tuple[List[Any], List[bool]]:\n        bounding_boxes, has_text_flag = self.detect_text(frames)"
        },
        {
            "comment": "This code creates a VideoEasyOCRExtractor object, then runs the detect_text function 100 times on two image files, logging the results and execution time for each run. It finally logs the average execution time.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/video/VideoEasyOCRExtractor.py\":136-152",
            "content": "        return bounding_boxes, has_text_flag\nif __name__ == '__main__':\n    extractor = VideoEasyOCRExtractor()\n    times = []\n    for i in range(100):\n        start = time.time()\n        res = extractor.detect_text(['./res/test1.jpg', './res/test2.jpg'])\n        logger.write(res)\n        cost = time.time() - start\n        times.append(cost)\n        logger.write(cost)\n    logger.write(np.mean(times))"
        }
    ]
}