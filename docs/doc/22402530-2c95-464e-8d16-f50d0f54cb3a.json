{
    "summary": "This code introduces a `FrameBuffer` and `VideoRecorder` class for managing video frames in multi-threaded environments, utilizing OpenCV's VideoWriter, mss library, PyAutoGUI, OCR, spaCy's NLP, and handles duplicate frames, errors. It captures video frames, converts them to numpy arrays, applies OCR if needed, and initializes a VideoRecorder object for retrieving video and stopping screen capture.",
    "details": [
        {
            "comment": "The code defines a `FrameBuffer` class that uses a threading lock to manage a queue of frames. It supports adding frames, retrieving the last frame, and searching for a specific frame by ID. The class also provides a method to retrieve a specified number of frames before a given frame ID. This class appears to be used for storing and managing video frames in a multi-threaded environment.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/video/VideoRecorder.py\":0-50",
            "content": "import threading\nimport os\nimport time\nfrom typing import Tuple\nimport spacy\nimport numpy as np\nimport cv2\nimport mss\nfrom cradle.log import Logger\nfrom cradle.config import Config\nfrom cradle.gameio.video.VideoEasyOCRExtractor import VideoEasyOCRExtractor\nconfig = Config()\nlogger = Logger()\nclass FrameBuffer():\n    def __init__(self):\n        self.queue = []\n        self.lock = threading.Lock()\n    def add_frame(self, frame_id, frame):\n        with self.lock:\n            self.queue.append((frame_id, frame))\n    def get_last_frame(self):\n        with self.lock:\n            if len(self.queue) == 0:\n                return None\n            else:\n                return self.queue[-1]\n    def get_frame_by_frame_id(self, frame_id):\n        with self.lock:\n            for frame in self.queue:\n                if frame[0] == frame_id:\n                    return frame\n        return None\n    def get_frames_to_latest(self, frame_id, before_frame_nums=5):\n        frames = []\n        with self.lock:\n            for frame in self.queue:"
        },
        {
            "comment": "The code defines a class VideoRecorder that records video frames from a screen region. It uses a frame buffer and a lock for thread-safe queue operations. The VideoRecorder has methods to initialize the instance, clear the queue, and get frames between specific frame IDs. Frame ID refers to the order of frames in the recording sequence.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/video/VideoRecorder.py\":51-85",
            "content": "                if frame[0] >= frame_id - before_frame_nums and frame[0] <= frame_id:\n                    frames.append(frame)\n        return frames\n    def clear(self):\n        with self.lock:\n            self.queue.clear()\n    def get_frames(self, start_frame_id, end_frame_id=None):\n        frames = []\n        with self.lock:\n            for frame in self.queue:\n                if frame[0] >= start_frame_id:\n                    if end_frame_id is not None and frame[0] > end_frame_id:\n                        break\n                    frames.append(frame)\n        return frames\nclass VideoRecorder():\n    def __init__(self, video_path: str, screen_region: Tuple[int, int, int, int] = config.game_region):\n        self.fps = config.video_fps\n        self.max_size = 10000\n        self.video_path = video_path\n        self.screen_region = screen_region\n        self.frame_size = (self.screen_region[2], self.screen_region[3])\n        self.current_frame_id = -1\n        self.current_frame = None\n        self.frame_buffer = FrameBuffer()"
        },
        {
            "comment": "Thread creation: Initializing a background thread for screen capture.\nVideo splits directory setup: Creating the directory to store video file splits.\nNatural Language Processing (NLP) setup: Loading an English language model for text extraction.\nVideo OCR extractor setup: Instantiating a VideoOCRExtractor object.\nFrame operations: Methods to get frames and frames up to the latest.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/video/VideoRecorder.py\":86-113",
            "content": "        self.thread_flag = True\n        self.thread = threading.Thread(\n            target=self.capture_screen,\n            args=(self.frame_buffer, ),\n            name='Screen Capture'\n        )\n        self.thread.daemon = True\n        self.video_splits_dir = os.path.join(os.path.dirname(self.video_path), 'video_splits')\n        os.makedirs(self.video_splits_dir, exist_ok=True)\n        self.nlp = spacy.load(\"en_core_web_lg\")\n        self.video_ocr_extractor = VideoEasyOCRExtractor()\n        self.pre_text = None\n    def get_frames(self, start_frame_id, end_frame_id = None):\n        return self.frame_buffer.get_frames(start_frame_id, end_frame_id)\n    def get_frames_to_latest(self, frame_id, before_frame_nums = 5):\n        return self.frame_buffer.get_frames_to_latest(frame_id, before_frame_nums)\n    def get_video(self, start_frame_id, end_frame_id = None):\n        path = os.path.join(self.video_splits_dir, 'video_{:06d}.mp4'.format(start_frame_id))\n        writer = cv2.VideoWriter(path, cv2.VideoWriter_fourcc(*'mp4v'), self.fps, self.frame_size)"
        },
        {
            "comment": "The code defines a VideoRecorder class that captures the screen and saves it as a video file using OpenCV's VideoWriter. The class has methods for recording videos, clearing the frame buffer, getting the current frame, and getting the current frame ID. It uses the mss library to capture the screen region specified by the user.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/video/VideoRecorder.py\":115-154",
            "content": "        frames = self.get_frames(start_frame_id, end_frame_id)\n        for frame in frames:\n            writer.write(frame[1])\n        writer.release()\n        return path\n    def clear_frame_buffer(self):\n        self.frame_buffer.clear()\n    def get_current_frame(self):\n        \"\"\"\n        Get the current frame\n        \"\"\"\n        return self.current_frame\n    def get_current_frame_id(self):\n        \"\"\"\n        Get the current frame id\n        \"\"\"\n        return self.current_frame_id\n    def capture_screen(self, frame_buffer: FrameBuffer):\n        logger.write('Screen capture started')\n        video_writer = cv2.VideoWriter(self.video_path,\n                                       cv2.VideoWriter_fourcc(*'mp4v'),\n                                       self.fps,\n                                       self.frame_size)\n        with mss.mss() as sct:\n            region = self.screen_region\n            region = {\n                \"left\": region[0],\n                \"top\": region[1],\n                \"width\": region[2],\n                \"height\": region[3],"
        },
        {
            "comment": "This code is continuously grabbing frames from a video using PyAutoGUI's `sct.grab()` function, converting them to numpy arrays for further processing. If OCR (Optical Character Recognition) is enabled and the text in the frame is different from the previous one, it updates a flag indicating so. The code uses spaCy library's natural language processing capabilities to compare the text of the frames.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/video/VideoRecorder.py\":155-178",
            "content": "            }\n            while self.thread_flag:\n                try:\n                    frame = sct.grab(region)\n                    frame = np.array(frame) # Convert to numpy array\n                    # if config.ocr_enabled is true, start ocr and check whether the text is different from the previous one\n                    if config.ocr_enabled:\n                        cur_text = self.video_ocr_extractor.extract_text(frame, return_full=0)\n                        cur_text = cur_text[0]\n                        cur_text = \" \".join(cur_text)\n                        if self.pre_text is None:\n                            self.pre_text = cur_text\n                        else:\n                            emb1 = self.nlp(self.pre_text)\n                            emb2 = self.nlp(cur_text)\n                            score = emb1.similarity(emb2)\n                            if score < config.ocr_similarity_threshold:\n                                config.ocr_different_previous_text = True\n                            else:"
        },
        {
            "comment": "Code snippet handles video recording by implementing OCR, duplicate frames, and thread flag checking. It also includes error handling for KeyboardInterrupt.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/video/VideoRecorder.py\":179-200",
            "content": "                                config.ocr_different_previous_text = False\n                            self.pre_text = cur_text\n                    # if config.ocr_enabled is false, the ocr is not enabled, so the pre_text should be None\n                    if not config.ocr_enabled and self.pre_text is not None:\n                        self.pre_text = None\n                    frame = cv2.cvtColor(frame, cv2.COLOR_BGRA2BGR)\n                    video_writer.write(frame)\n                    self.current_frame = frame\n                    for i in range(config.duplicate_frames):\n                        self.current_frame_id += 1\n                        frame_buffer.add_frame(self.current_frame_id, frame)\n                    time.sleep(config.duplicate_frames / config.video_fps - 0.05) # 0.05: time for taking a screenshots\n                    # Check the flag at regular intervals\n                    if not self.thread_flag:\n                        break\n                except KeyboardInterrupt:\n                    logger.write('Screen capture interrupted')"
        },
        {
            "comment": "The code initializes a VideoRecorder object, starts the screen capture thread, waits for 10 seconds, retrieves the video with start_frame_id=0, and then stops the screen capture. The finish_capture() function checks if the thread is alive, sets the flag to False, joins the thread, and logs the finish message.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/video/VideoRecorder.py\":201-229",
            "content": "                    self.finish_capture()\n            video_writer.release()\n    def start_capture(self):\n        self.thread.start()\n    def finish_capture(self):\n        if not self.thread.is_alive():\n            logger.write('Screen capture thread is not executing')\n        else:\n            self.thread_flag = False  # Set the flag to False to signal the thread to stop\n            self.thread.join()  # Now we wait for the thread to finish\n            logger.write('Screen capture finished')\nif __name__ == '__main__':\n    capture_video = VideoRecorder('test.mp4')\n    capture_video.start_capture()\n    config.ocr_enabled = True\n    time.sleep(10)\n    capture_video.get_video(start_frame_id=0)\n    config.ocr_enabled = False\n    capture_video.finish_capture()"
        }
    ]
}