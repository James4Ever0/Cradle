{
    "summary": "This code creates a SkillRegistry, imports libraries, and includes functions for skill retrieval, conflict prevention, and registry management. It filters the skill library based on 'skill_scope', sets embedding values, and stores skills in SKILL_REGISTRY and SKILL_INDEX.",
    "details": [
        {
            "comment": "The code imports necessary libraries, defines variables for configuration and logging, creates an IO environment object, initializes an empty skill registry, and sets up constants for various skill categories. The code also defines a list of basic skills, movement skills, map skills, and trade skills.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/skill_registry.py\":0-33",
            "content": "import re\nimport ast\nimport time\nfrom typing import Dict, Any, List, Tuple\nimport inspect\nimport copy\nimport os\nimport base64\nimport numpy as np\nfrom cradle.config import Config\nfrom cradle.log import Logger\nfrom cradle.utils.json_utils import load_json, save_json\nfrom cradle.gameio import IOEnvironment\nfrom cradle import constants\nconfig = Config()\nlogger = Logger()\nio_env = IOEnvironment()\nSKILL_REGISTRY = {}\nSKILL_INDEX = []\nSKILL_NAME_KEY = 'skill_name'\nSKILL_EMBEDDING_KEY = 'skill_emb'\nSKILL_CODE_KEY = 'skill_code'\nSKILL_CODE_HASH_KEY = 'skill_code_base64'\nEXPL_SKILL_LIB_FILE='skill_lib.json'\nBASIC_SKILL_LIB_FILE='skill_lib_basic.json'\nBASIC_SKILLS = ['shoot_wolves', 'follow', 'go_to_horse', 'turn_and_move_forward', 'turn', 'move_forward', 'navigate_path', 'shoot', 'select_weapon', 'select_sidearm', 'fight', 'mount_horse']\nMOVEMENT_SKILLS = ['turn', 'move_forward', 'turn_and_move_forward']\nMAP_SKILLS = ['select_previous_index_object', 'select_next_index_object']\nTRADE_SKILLS = ['select_upside_product', 'select_downside_product', 'select_rightside_product', 'select_leftside_product']"
        },
        {
            "comment": "The code defines a skill registry for registering and waiting for skills to finish execution. It includes a `register_skill` decorator, which takes a name and wraps the skill function with additional functionality, including storing the skill's source code and removing unnecessary annotations. The `post_skill_wait` function waits for a specified amount of time after a skill is executed. The `SkillRegistry` class serves as a container for registered skills.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/skill_registry.py\":34-66",
            "content": "DENY_LIST_TERMS = ['shoot', 'follow', 'turn', 'move_forward', 'go_to_horse', 'navigate_path', 'select_weapon', 'select_sidearm', 'fight', 'mount_horse']\nALLOW_LIST_TERMS = []\ndef register_skill(name):\n    def decorator(skill):\n        SKILL_REGISTRY[name] = skill\n        skill_code = inspect.getsource(skill)\n        # Remove unnecessary annotation in skill library\n        if f\"@register_skill(\\\"{name}\\\")\\n\" in skill_code:\n            skill_code = skill_code.replace(f\"@register_skill(\\\"{name}\\\")\\n\", \"\")\n        SKILL_INDEX.append({SKILL_NAME_KEY:          name,\n                            SKILL_EMBEDDING_KEY:     None,\n                            SKILL_CODE_KEY:          skill_code})\n        return skill\n    return decorator\ndef post_skill_wait(wait_time: config.DEFAULT_POST_ACTION_WAIT_TIME):\n    \"\"\"Wait for skill to finish. Like if there is an animation\"\"\"\n    time.sleep(wait_time)\nclass SkillRegistry:\n    def __init__(\n        self,\n        local_path = '',\n        from_local = False,\n        store_path = '',"
        },
        {
            "comment": "This code initializes a SkillRegistry object with the specified skill scope (Basic, Full, or None), local and store paths, and embedding provider. It sets default filenames for Basic and Full scopes, handles None skill_scope by setting from_local to False, copies skill dictionaries for each category, and checks if the local skill library file exists if from_local is True.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/skill_registry.py\":67-91",
            "content": "        skill_scope = 'Full',\n        embedding_provider = None\n    ):\n        self.from_local = from_local\n        if skill_scope == 'Basic':\n            self.skill_library_filename = BASIC_SKILL_LIB_FILE\n        elif skill_scope == 'Full':\n            self.skill_library_filename = EXPL_SKILL_LIB_FILE\n        elif skill_scope == None:\n            self.from_local = False\n        self.skill_scope = skill_scope\n        self.local_path = local_path\n        self.store_path = store_path\n        self.embedding_provider = embedding_provider\n        self.basic_skills = copy.deepcopy(BASIC_SKILLS)\n        self.recent_skills = []\n        self.movement_skills = copy.deepcopy(MOVEMENT_SKILLS)\n        self.map_skills = copy.deepcopy(MAP_SKILLS)\n        self.trade_skills = copy.deepcopy(TRADE_SKILLS)\n        if self.from_local:\n            if not os.path.exists(os.path.join(self.local_path, self.skill_library_filename)):\n                logger.error(f\"{os.path.join(self.local_path, self.skill_library_filename)} does not exist.\")"
        },
        {
            "comment": "This code filters the skill library and stores or loads it based on the condition, while also extracting function information from input strings using regular expressions and Python's ast module.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/skill_registry.py\":92-117",
            "content": "                self.filter_skill_library()\n                self.store_skills(os.path.join(self.local_path, self.skill_library_filename))\n            else:\n                self.load_skill_library(os.path.join(self.local_path, self.skill_library_filename))\n        else:\n            self.filter_skill_library()\n    def extract_function_info(self, input_string: str = \"open_map()\"):\n        pattern = re.compile(r'(\\w+)\\((.*?)\\)')\n        match = pattern.match(input_string)\n        if match:\n            function_name = match.group(1)\n            raw_arguments = match.group(2)\n            # To avoid simple errors based on faulty model output\n            if raw_arguments is not None and len(raw_arguments) > 0:\n                raw_arguments = raw_arguments.replace(\"=false\", \"=False\").replace(\"=true\", \"=True\")\n            try:\n                parsed_arguments = ast.parse(f\"fake_func({raw_arguments})\", mode='eval')\n            except SyntaxError:\n                raise ValueError(\"Invalid function call/arg format to parse.\")"
        },
        {
            "comment": "The code includes functions for parsing function calls, executing skills, and converting expressions to skills. The \"execute_skill\" function takes a name and optional parameters to execute the corresponding skill in the registry. The \"execute_nop_skill\" pauses for 2 seconds. The \"convert_expression_to_skill\" extracts skill name and parameters from an expression string.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/skill_registry.py\":119-150",
            "content": "            arguments = {}\n            for node in ast.walk(parsed_arguments):\n                if isinstance(node, ast.keyword):\n                    arguments[node.arg] = ast.literal_eval(node.value)\n            if len(raw_arguments) > 0 and len(arguments.keys()) == 0:\n                raise ValueError(\"Call arguments not properly parsed!\")\n            return function_name, arguments\n        else:\n            raise ValueError(\"Invalid function call format string.\")\n    def execute_skill(self, name: str = \"open_map\", params: Dict = None):\n        # @TODO return execution error info\n        if name in self.skill_registry:\n            skill = self.skill_registry[name]\n            skill(**params)\n        else:\n            raise ValueError(f\"Function '{name}' not found in the registry.\")\n    def execute_nop_skill(self):\n        time.sleep(2)\n    def convert_expression_to_skill(self, expression: str = \"open_map()\"):\n        skill_name, skill_params = self.extract_function_info(expression)\n        return skill_name, skill_params"
        },
        {
            "comment": "This function retrieves the documentation of a skill from the library and returns it in a structured format. It extracts the skill's name, description, and parameters if available.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/skill_registry.py\":153-179",
            "content": "    def get_from_skill_library(self, skill_name: str) -> Dict:\n        skill = self.skill_registry[skill_name]\n        docstring = inspect.getdoc(skill)\n        if docstring:\n            params = inspect.signature(skill).parameters\n            if len(params) > 0:\n                param_descriptions = {}\n                for param in params.values():\n                    name = param.name\n                    param_description = re.search(rf\"- {name}: (.+).\", docstring).group(1)\n                    param_descriptions[name] = param_description\n                return {\n                    \"function_expression\": f\"{skill.__name__}({', '.join(params.keys())})\",\n                    \"description\": docstring,\n                    \"parameters\": param_descriptions,\n                }\n            else:\n                return {\n                    \"function_expression\": f\"{skill.__name__}()\",\n                    \"description\": docstring,\n                    \"parameters\": {},\n                }\n        else:\n            return None"
        },
        {
            "comment": "This code defines two methods, `get_skill_library_in_code()` and `register_skill_from_code()`, for interacting with a skill registry. The `get_skill_library_in_code()` method retrieves the code of a skill given its name from the registry. It first tries to extract the function info and if it fails, uses the provided skill name directly. Then, it searches for the skill in the registry and returns its code and an information string if not found. The `register_skill_from_code()` method registers a skill from a given code string into the registry. It also takes an optional overwrite flag to determine whether to replace an existing skill with the same name.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/skill_registry.py\":182-211",
            "content": "    def get_skill_library_in_code(self, skill: Any) -> Tuple[str, str]:\n        info = None\n        try:\n            skill_name, _ = self.extract_function_info(skill)\n        except:\n            skill_name = skill\n        skill_code = None\n        for item in self.skill_index:\n            if item[SKILL_NAME_KEY] == skill_name:\n                skill_code = item[SKILL_CODE_KEY]\n                if f\"@register_skill(\\\"{skill_name}\\\")\\n\" in skill_code:\n                    skill_code = skill_code.replace(f\"@register_skill(\\\"{skill_name}\\\")\\n\", \"\")\n                break\n        if skill_code is None:\n            info = f\"Skill '{skill_name}' not found in the registry.\"\n        return skill_code, info\n    def register_skill_from_code(self, skill_code: str, overwrite = False) -> Tuple[bool, str]:\n        \"\"\"Register the skill function from the code string.\n        Args:\n            skill_code: the code of skill.\n            overwrite: the flag indicates whether to overwrite the skill with the same name or not.\n        Returns:"
        },
        {
            "comment": "The code provides three functions: `lower_func_name()` to lowercase the function name, `get_func_name()` to extract the function name from the skill code, and `check_param_description()` to check if a skill's docstring contains parameter descriptions. It ensures skills in .py files are not overwritten by appending '_generated' to their names.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/skill_registry.py\":212-236",
            "content": "            bool: the true value means that there is no problem in the skill_code. The false value means that we may need to re-generate it.\n            str: the detailed information about the bool.\n        \"\"\"\n        def lower_func_name(skill_code):\n            skill_name = get_func_name(skill_code)\n            replaced_name = skill_name.lower()\n            # To make sure the skills in .py files will not be overwritten.\n            # The skills not in .py files can still be overwritten.\n            if replaced_name in SKILL_REGISTRY:\n                replaced_name = replaced_name+'_generated'\n            return skill_code.replace(skill_name, replaced_name)\n        def get_func_name(skill_code):\n            return skill_code.split('def ')[-1].split('(')[0]\n        def check_param_description(skill) -> bool:\n            docstring = inspect.getdoc(skill)\n            if docstring:\n                params = inspect.signature(skill).parameters\n                if len(params) > 0:\n                    for param in params.values():"
        },
        {
            "comment": "This code checks if a skill name conflicts with predefined protected terms, either allowing or denying their use. If the skill code lacks functionality or has an ambiguous name, it returns an error message and False.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/skill_registry.py\":237-269",
            "content": "                        if not re.search(rf\"- {param.name}: (.+).\", docstring):\n                            return False\n                    return True\n                else:\n                    return True\n            else:\n                return True\n        def check_protection_conflict(skill):\n            for word in ALLOW_LIST_TERMS:\n                if word in skill:\n                    return True\n            for word in DENY_LIST_TERMS:\n                if word in skill:\n                    return False\n            return True\n        info = None\n        if skill_code.count('(') < 2:\n            info = \"Skill code contains no functionality.\"\n            logger.error(info)\n            return True, info\n        skill_code = lower_func_name(skill_code)\n        skill_name = get_func_name(skill_code)\n        # Always avoid adding skills that are ambiguous with existing pre-defined ones.\n        if check_protection_conflict(skill_name) == False:\n            info = f\"Skill '{skill_name}' conflicts with protected skills.\""
        },
        {
            "comment": "This code checks if the skill name is on a deny list and protects basic skills. If not, it deletes an existing skill, logs information, and attempts to evaluate the skill code. It handles invalid skill codes or incorrect parameter descriptions by logging errors.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/skill_registry.py\":270-298",
            "content": "            for word in DENY_LIST_TERMS:\n                if word in skill_name:\n                    for protected_skill in BASIC_SKILLS:\n                        if word in protected_skill:\n                            self.recent_skills.append(protected_skill)\n            logger.write(info)\n            return True, info\n        if overwrite:\n            if skill_name in self.skill_registry:\n                self.delete_skill(skill_name)\n                logger.write(f\"Skill '{skill_name}' will be overwritten.\")\n        if skill_name in self.skill_registry:\n            info = f\"Skill '{skill_name}' already exists.\"\n            logger.write(info)\n            return True, info\n        try:\n            exec(skill_code)\n            skill = eval(skill_name)\n        except:\n            info = \"The skill code is invalid.\"\n            logger.error(info)\n            return False, info\n        if check_param_description(skill) == False:\n            info = \"The format of parameter description is wrong.\"\n            logger.error(info)"
        },
        {
            "comment": "Function adds a skill to the registry and logs the action, while delete_skill function removes a skill from the registry and updates the index and recent skills list.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/skill_registry.py\":299-324",
            "content": "            return False, info\n        self.skill_registry[skill_name] = skill\n        self.skill_index.append({SKILL_NAME_KEY:     skill_name,\n                                SKILL_EMBEDDING_KEY: self.get_embedding(skill_name, inspect.getdoc(skill)),\n                                SKILL_CODE_KEY:      skill_code})\n        self.recent_skills.append(skill_name)\n        info = f\"Skill '{skill_name}' has been registered.\"\n        logger.write(info)\n        return True, info\n    def delete_skill(self, skill_name: str) -> None:\n        try:\n            skill_name, _ = self.extract_function_info(skill_name)\n        except:\n            skill_name = skill_name\n        if skill_name in self.skill_registry:\n            del self.skill_registry[skill_name]\n            position = next((i for i, skill in enumerate(self.skill_index) if skill[SKILL_NAME_KEY] == skill_name), None)\n            self.skill_index.pop(position)\n        if skill_name in self.recent_skills:\n            position = self.recent_skills.index(skill_name)"
        },
        {
            "comment": "This code retrieves skills based on a query task, skill number, and screen type. It sorts skills by their similarity to the query task, appends relevant ones to the target list, and adds additional skills for specific screens.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/skill_registry.py\":325-345",
            "content": "            self.recent_skills.pop(position)\n    def retrieve_skills(self, query_task: str, skill_num: int, screen_type: str) -> List[str]:\n        skill_num = min(skill_num, len(self.skill_index))\n        target_skills = [skill for skill in self.recent_skills]\n        task_emb = np.array(self.embedding_provider.embed_query(query_task))\n        self.skill_index.sort(key = lambda x: -np.dot(x[SKILL_EMBEDDING_KEY],task_emb))\n        for skill in self.skill_index:\n            if len(target_skills)>=skill_num:\n                break\n            else:\n                if skill[SKILL_NAME_KEY] not in target_skills:\n                    target_skills.append(skill[SKILL_NAME_KEY])\n        self.recent_skills = []\n        # Add required skills based on screen type\n        if screen_type == constants.GENERAL_GAME_INTERFACE:\n            target_skills += [skill for skill in self.movement_skills]\n        elif screen_type == constants.TRADE_INTERFACE or screen_type == constants.SATCHEL_INTERFACE:\n            target_skills += [skill for skill in self.trade_skills]"
        },
        {
            "comment": "The code is a part of a skill registry class in the gameio module. It allows registering available skills, retrieves all registered skills, and gets embeddings for specific skills. In case of MAP_INTERFACE screen type, it adds skills from the map_skills list to target_skills. The register_available_skills function updates the skill registry based on provided candidates, removing any missing skills. get_all_skills returns a list of all registered skills, and get_embedding retrieves embeddings for a given skill name and document.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/skill_registry.py\":346-373",
            "content": "        elif screen_type == constants.MAP_INTERFACE:\n            target_skills += [skill for skill in self.map_skills]\n        return target_skills\n    def register_available_skills(self, candidates:List[str]) -> None:\n        for skill_key in candidates:\n            if skill_key not in self.skill_registry:\n                logger.error(f\"Skill '{skill_key}' does not exist.\")\n        for skill_key in list(self.skill_registry.keys()):\n            if skill_key not in candidates:\n                del self.skill_registry[skill_key]\n        self.skill_index_t = []\n        for skill in self.skill_index:\n            if skill[SKILL_NAME_KEY] in candidates:\n                self.skill_index_t.append(skill)\n        self.skill_index = copy.deepcopy(self.skill_index_t)\n        del self.skill_index_t\n    def get_all_skills(self) -> List[str]:\n        return list(self.skill_registry.keys())\n    def get_embedding(self, skill_name, skill_doc):\n        return np.array(self.embedding_provider.embed_query('{}: {}'.format(skill_name, skill_doc)))"
        },
        {
            "comment": "The code defines functions for storing and loading skills in a skill library. It converts skill strings to functions, stores them in a dictionary with their code, embedding, and hash, and writes the data to a JSON file using base64 encoding. When loading, it reads the JSON file, decodes the base64 data, and populates the skill library accordingly.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/skill_registry.py\":376-403",
            "content": "    def convert_str_to_func(self, skill_name, skill_local):\n        exec(skill_local[skill_name][SKILL_CODE_KEY])\n        skill = eval(skill_name)\n        return skill\n    def store_skills(self, file_path = None) -> None:\n        if file_path == None:\n            file_path = os.path.join(self.store_path, self.skill_library_filename)\n        store_file = {}\n        for skill in self.skill_index:\n            store_file[skill[SKILL_NAME_KEY]] = {SKILL_CODE_KEY:skill[SKILL_CODE_KEY],\n                                                 SKILL_EMBEDDING_KEY:base64.b64encode(skill[SKILL_EMBEDDING_KEY].tobytes()).decode('utf-8'),\n                                                 SKILL_CODE_HASH_KEY:base64.b64encode(skill[SKILL_CODE_KEY].encode('utf-8')).decode('utf-8')}\n        save_json(file_path = file_path, json_dict = store_file, indent = 4)\n    def load_skill_library(self, file_name) -> None:\n        skill_local = load_json(file_name)\n        self.skill_index = []\n        self.skill_registry = {}\n        for skill_name in skill_local.keys():"
        },
        {
            "comment": "The code checks if the skill_name exists in SKILL_REGISTRY. If it does, the manually-designed skill is added to the skill registry and the skill code is encoded. If the encoded code matches the expected hash, the skill index is updated with the skill's name, encoding of the skill code, and the source code of the skill. If the encoded code doesn't match the expected hash, the skill index is updated by calling the get_embedding method to recompute the embeddings for the skill.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/skill_registry.py\":405-419",
            "content": "            if skill_name in SKILL_REGISTRY:\n                # the manually-designed skills follow the code in .py files\n                self.skill_registry[skill_name] = SKILL_REGISTRY[skill_name]\n                skill_code_base64 = base64.b64encode(skill_local[skill_name][SKILL_CODE_KEY].encode('utf-8')).decode('utf-8')\n                if skill_code_base64 == skill_local[skill_name][SKILL_CODE_HASH_KEY]: # the skill_code is not modified\n                    self.skill_index.append({SKILL_NAME_KEY:skill_name,\n                                             SKILL_EMBEDDING_KEY:np.frombuffer(base64.b64decode(skill_local[skill_name][SKILL_EMBEDDING_KEY]), dtype=np.float64),\n                                             SKILL_CODE_KEY:inspect.getsource(SKILL_REGISTRY[skill_name])})\n                else: # skill_code has been modified, we should recompute embeddings\n                    self.skill_index.append({SKILL_NAME_KEY:skill_name,\n                                             SKILL_EMBEDDING_KEY:self.get_embedding(skill_name, inspect.getdoc(SKILL_REGISTRY[skill_name])),"
        },
        {
            "comment": "This code handles skill registration and storage in a game. If the skill code is found within the function, it adds it to the skill registry. It then checks if the skill code is unmodified from the JSON file. If so, it appends the skill details (name, embedding, and code) to the skill index. If not, it recomputes the skill's embedding as the code has been modified.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/skill_registry.py\":420-435",
            "content": "                                             SKILL_CODE_KEY:inspect.getsource(SKILL_REGISTRY[skill_name])})\n            else:\n                # the skills got from gather_information follow the code in .json file\n                skill = self.convert_str_to_func(skill_name, skill_local)\n                self.skill_registry[skill_name] = skill\n                skill_code_base64 = base64.b64encode(skill_local[skill_name][SKILL_CODE_KEY].encode('utf-8')).decode('utf-8')\n                if skill_code_base64 == skill_local[skill_name][SKILL_CODE_HASH_KEY]: # the skill_code is not modified\n                    self.skill_index.append({SKILL_NAME_KEY:skill_name,\n                                             SKILL_EMBEDDING_KEY:np.frombuffer(base64.b64decode(skill_local[skill_name][SKILL_EMBEDDING_KEY]), dtype=np.float64),\n                                             SKILL_CODE_KEY:skill_local[skill_name][SKILL_CODE_KEY]})\n                else: # skill_code has been modified, we should recompute embedding\n                    self.skill_index.append({SKILL_NAME_KEY:skill_name,"
        },
        {
            "comment": "The code is filtering the skill library based on the 'skill_scope' provided. If 'Basic', it only includes necessary skills, if 'Full', it copies all existing skills, and if 'None', it initializes an empty registry and index. The SKILL_REGISTRY is used to store skills, while SKILL_INDEX provides a list of available skill names.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/skill_registry.py\":436-459",
            "content": "                                             SKILL_EMBEDDING_KEY:self.get_embedding(skill_name, inspect.getdoc(skill)),\n                                             SKILL_CODE_KEY:skill_local[skill_name][SKILL_CODE_KEY]})\n    def filter_skill_library(self) -> None:\n        if self.skill_scope == 'Basic':\n            self.skill_registry = {}\n            self.skill_index = []\n            for skill in SKILL_INDEX:\n                if skill[SKILL_NAME_KEY] in self.basic_skills:\n                    self.skill_registry[skill[SKILL_NAME_KEY]] = SKILL_REGISTRY[skill[SKILL_NAME_KEY]]\n                    self.skill_index.append(skill)\n        if self.skill_scope == 'Full':\n            self.skill_registry = copy.deepcopy(SKILL_REGISTRY)\n            self.skill_index = copy.deepcopy(SKILL_INDEX)\n        if self.skill_scope == None:\n            self.skill_registry = {}\n            self.skill_index = []\n            for skill in SKILL_INDEX:\n                if skill[SKILL_NAME_KEY] in self.necessary_skills:\n                    self.skill_registry[skill[SKILL_NAME_KEY]] = SKILL_REGISTRY[skill[SKILL_NAME_KEY]]"
        },
        {
            "comment": "This code is appending skills to a list and then iterates over the skills, setting the skill's embedding value using the get_embedding function and the skill's name and documentation.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/gameio/skill_registry.py\":460-463",
            "content": "                    self.skill_index.append(skill)\n        for skill in self.skill_index:\n            skill[SKILL_EMBEDDING_KEY] = self.get_embedding(skill[SKILL_NAME_KEY], inspect.getdoc(SKILL_REGISTRY[skill[SKILL_NAME_KEY]]))"
        }
    ]
}