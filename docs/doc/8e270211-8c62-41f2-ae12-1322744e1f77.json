{
    "summary": "The code imports cradle modules, defines a decision-making function, creates an Agent class with memory, game manager, and planner attributes, sets up tasks for the agent, handles in-game actions, logging, image capture, event summaries, memory updates, success detection, and manages task completion, exceptions, and non-paused skill execution.",
    "details": [
        {
            "comment": "This code imports various modules from the \"cradle\" library and defines a function called `decision_making_args`. It takes in two arguments - `planner` and `memory`, which are objects of the `Planner` and `BaseMemory` classes, respectively. The function prepares input for the decision-making process by retrieving data from the `planner` object and the `memory` object. This function is used to gather information needed for making decisions in an agent's loop.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/agent/agent.py\":0-26",
            "content": "from cradle.config import Config\nfrom cradle.log import Logger\nfrom cradle.gameio import GameManager\nfrom cradle.planner.planner import Planner\nfrom cradle.memory import BaseMemory\nfrom cradle.gameio.atomic_skills.map import __all__ as map_skills\nfrom cradle.gameio.atomic_skills.buy import __all__ as buy_skills\nfrom cradle.gameio.atomic_skills.trade_utils import __all__ as trade_skills\nfrom cradle.gameio.atomic_skills.move import __all__ as move_skills\nfrom cradle.gameio.composite_skills.navigation import __all__ as nav_skills\nfrom cradle.gameio.composite_skills.go_to_icon import __all__ as go_skills\nconfig = Config()\nlogger = Logger()\n# This is an incomplete example with not complete quality code, just to bootstrap the repo.\n# For now, use the prototype_runner.py to run the agent loop.\ndef decision_making_args(planner, memory):\n    input = planner.decision_making_.input_map\n    input[\"task_description\"] = memory.get_recent_history(\"task_description\", k=1)[0]\n    image_introduction = [\n        {\n            \"introduction\": input[\"image_introduction\"][-2][\"introduction\"],"
        },
        {
            "comment": "This code snippet retrieves and updates the input map for a success detection function. It gets recent history from memory, such as task descriptions, images, previous actions, reasoning, and skill libraries. The updated input map is then returned.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/agent/agent.py\":27-51",
            "content": "            \"path\": memory.get_recent_history(\"image\", k=2)[0],\n            \"assistant\": input[\"image_introduction\"][-2][\"assistant\"]\n        },\n        {\n            \"introduction\": input[\"image_introduction\"][-1][\"introduction\"],\n            \"path\": memory.get_recent_history(\"image\", k=1)[0],\n            \"assistant\": input[\"image_introduction\"][-1][\"assistant\"]\n        }\n    ]\n    input[\"image_introduction\"] = image_introduction\n    input[\"previous_action\"] = memory.get_recent_history(\"action\", k=1)[-1]\n    input[\"previous_reasoning\"] = memory.get_recent_history(\"decision_making_reasoning\", k=1)[-1]\n    input['skill_library'] = memory.get_recent_history(\"skill_library\", k=1)[-1]\n    return input\ndef success_detection_args(planner, memory):\n    input = planner.success_detection_.input_map\n    input[\"task_description\"] = memory.get_recent_history(\"task_description\", k=1)[0]\n    image_introduction = [\n        {\n            \"introduction\": input[\"image_introduction\"][-2][\"introduction\"],\n            \"path\": memory.get_recent_history(\"image\", k=2)[0],"
        },
        {
            "comment": "The code defines an \"Agent\" class with a loop method and initializes its attributes. The agent's loop iterates continuously, managing its memory, game manager, and planner. It sets the continuous_limit to 10 and manages sub-tasks through loop_count, last_executed_skill, current_sub_task, sub_task_args, and sub_task_index variables.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/agent/agent.py\":52-93",
            "content": "            \"assistant\": input[\"image_introduction\"][-2][\"assistant\"]\n        },\n        {\n            \"introduction\": input[\"image_introduction\"][-1][\"introduction\"],\n            \"path\": memory.get_recent_history(\"image\", k=1)[0],\n            \"assistant\": input[\"image_introduction\"][-1][\"assistant\"]\n        }\n    ]\n    input[\"image_introduction\"] = image_introduction\n    input[\"previous_action\"] = memory.get_recent_history(\"action\", k=1)[-1]\n    input[\"previous_reasoning\"] = memory.get_recent_history(\"decision_making_reasoning\", k=1)[-1]\n    return input\nclass Agent:\n    def __init__(\n        self,\n        name,\n        memory : BaseMemory,\n        gm : GameManager,\n        planner : Planner\n    ):\n        self.name = name\n        self.memory = memory\n        self.gm = gm\n        self.planner = planner\n    def loop(self):\n        config.continuous_limit = 10\n        # Interaction Loop\n        loop_count = 0\n        last_executed_skill = None\n        current_sub_task = None\n        sub_task_args = None\n        sub_task_index = 0"
        },
        {
            "comment": "This code defines a list of decomposed task steps and their descriptions for a specific task, possibly in a game or interactive scenario. It consists of instructions like going to locations, creating waypoints, following lines, and buying items.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/agent/agent.py\":95-110",
            "content": "        # @TODO HACK\n        decomposed_task_steps          = [\"Go to the horse and mount it\",\n                                          \"Create waypoint to the saloon\",\n                                          \"Follow the red line to the saloon\",\n                                          \"Create waypoint to the store\",\n                                          \"Follow the red line to the store\",\n                                          \"Enter the store\",\n                                          \"Approach shopkeeper\",\n                                          \"Buy apple\"]\n        decomposed_task_description = [\"Your task is to go mount the horse.\",\n                                       \"Mark the \\\"Saloon\\\" on a Map as the Waypoint via the Index.\",\n                                       \"Go to the \\\"Saloon\\\"\",\n                                       \"Mark the \\\"General Store\\\" on a Map as the Waypoint via the Index.\",\n                                       \"Go to the \\\"General Store\\\"\",\n                                       \"Your task is to enter the general store.\","
        },
        {
            "comment": "The code is setting up the initial task for an agent, which involves going to a store and buying an item. It breaks down this task into a list of smaller subtasks involving skills like going, navigating, mapping, trading, and moving. The main_task_description provides a concise summary of the overall task. The code also sets up a logger to track the agent's progress in its loop with the environment specified by config.env_name.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/agent/agent.py\":111-133",
            "content": "                                       \"Your task is to get close to the shopkeeper.\",\n                                       \"Your task is to buy one 'APPLE'.\"]\n        decomposed_task_skills =    [   go_skills,\n                                        map_skills,\n                                        nav_skills,\n                                        map_skills,\n                                        nav_skills,\n                                        move_skills,\n                                        move_skills,\n                                        trade_skills + buy_skills]\n        # Initial task description, should be passed in agent setup\n        main_task_description = \"Go to store and buy item.\"\n        logger.write(f\"Starting {self.name} loop w/ env {config.env_name}\")\n        logger.write(f\"Initial task: {main_task_description}\")\n        current_state_image = None\n        previous_state_image = None\n        # Uncomment here if you want to try to make things less undeterministic\n        config.set_fixed_seed()"
        },
        {
            "comment": "This code initializes variables for controlling which sub-task to start on and whether to use summary or gathering info. It then enters an interaction loop, allowing the user to jump to later stages if needed before running the whole task. The logger writes information about the starting sub-task, and checks if the current sub-task is None before moving forward.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/agent/agent.py\":135-161",
            "content": "        # Which sub-task to start on, for debugging later steps in the flow\n        # But please try to run the whole thing, as the states starting from later are not fully the same\n        start_at_step = -1\n        use_information_summary = False\n        use_gathering_info = False\n        agent_success = False\n        # Start interaction loop\n        while not agent_success:\n            try:\n                if start_at_step >= 0 and start_at_step < len(decomposed_task_steps):\n                    # Jump configs to later stages...\n                    sub_task_index = start_at_step\n                    current_sub_task = decomposed_task_steps[sub_task_index]\n                    logger.write(f'Starting loop from sub-task #{sub_task_index} - {current_sub_task}')\n                    # So it doesn't reset in the next loop iteration\n                    start_at_step = -1\n                if current_sub_task is None:\n                    current_sub_task = decomposed_task_steps[sub_task_index]\n                sub_task_description = decomposed_task_description[sub_task_index]"
        },
        {
            "comment": "This code snippet retrieves sub-task skills and skill library, logs current sub-task, handles continuous mode limit, and captures the environment state.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/agent/agent.py\":162-184",
            "content": "                sub_task_skills = decomposed_task_skills[sub_task_index]\n                sub_task_skill_library = self.gm.get_skill_information(sub_task_skills)\n                self.memory.add_recent_history(\"task_description\", sub_task_description)\n                self.memory.add_recent_history(\"skill_library\", sub_task_skill_library)\n                logger.write(f\"Current sub-task: {current_sub_task}\")\n                # Stop if limit is reached\n                loop_count += 1\n                if (config.continuous_mode and\n                    config.continuous_limit > 0 and\n                    loop_count > config.continuous_limit\n                ):\n                    logger.warn(f\"Continuous Limit Reached: {config.continuous_limit} iteractions\")\n                    break\n                logger.write(f\"Loop iteration #{loop_count:0>3}\")\n                # Get environment input\n                logger.write(f\"> Capturing screen - state\")\n                current_state_image, _ = self.gm.capture_screen()\n                self.memory.add_recent_history(\"image\", current_state_image)"
        },
        {
            "comment": "This code handles the pausing of skills based on the last executed skill, gathers information for a current sub-task if needed, and makes decisions for executing appropriate actions. It interacts with the planner to gather information and make decisions using input functions and stores the results in respective variables.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/agent/agent.py\":186-208",
            "content": "                self.pause_if_needed(last_executed_skill) # Decide to press pause or not based on skill\n                info_response = \"\"\n                # Prepare info gathering, not all steps use it\n                if use_gathering_info:\n                    # Gets the appropriate gathering information prompt inputs for the current sub-task\n                    args_func = sub_task_args[\"gathering_info\"]\n                    logger.write(f'> Gathering information call...')\n                    data = self.planner.gather_information(input=args_func(current_state_image))\n                    info_response = data[\"res_dict\"][\"description\"]\n                logger.write(f'R: Description: {info_response}')\n                current_context = info_response\n                # Prepare decision making\n                skills_to_execute = []\n                logger.write(f'> Decision making call...')\n                data = self.planner.decision_making(input=decision_making_args(self.planner, self.memory))\n                skills_to_execute = data['res_dict']['actions']"
        },
        {
            "comment": "This code executes skills in the game based on reasoning and stores information about executed skills in memory. It also logs relevant steps and results for tracking purposes.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/agent/agent.py\":210-230",
            "content": "                plan_reasoning = data['res_dict']['reasoning']\n                if skills_to_execute is None:\n                    skills_to_execute = []\n                logger.write(f'R: Skills: {skills_to_execute}')\n                logger.write(f'R: Reasoning: {plan_reasoning}')\n                skill_steps = skills_to_execute[:1] # Max steps to execute at once\n                logger.write(f'> Executing actions in game...')\n                logger.write(f'E: Skill Steps: {skill_steps}')\n                exec_info = self.gm.execute_actions(skill_steps)\n                tmp = exec_info[\"last_skill\"] # exec_info also has the list of successfully executed skills. skill_steps is the full list, which may differ if there were execution errors.\n                if tmp is not None and len(tmp) > 0:\n                    last_executed_skill = tmp\n                logger.write(f\"> Capturing screen - post actions. Last: {last_executed_skill}\")\n                self.memory.add_recent_history(\"action\", last_executed_skill)"
        },
        {
            "comment": "This code snippet is adding recent history to the memory, capturing a current state image, and deciding whether or not to pause based on the skill being executed. It also checks if an information summary should be generated based on the maximum number of recent steps and the event count configuration.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/agent/agent.py\":231-244",
            "content": "                self.memory.add_recent_history(\"decision_making_reasoning\", plan_reasoning)\n                current_state_image, _ = self.gm.capture_screen(include_minimap=False)\n                self.memory.add_recent_history(\"image\", current_state_image)\n                self.pause_if_needed(last_executed_skill) # Decide to press pause or not based on skill\n                # summarization starts\n                if use_information_summary:\n                    if len(self.memory.get_recent_history(\"decision_making_reasoning\", self.memory.max_recent_steps)) == self.memory.max_recent_steps:\n                        event_count = min(config.max_recent_steps,config.event_count)\n                        input = self.planner.information_summary_.input_map\n                        logger.write(f'> Information summary call...')\n                        images = self.memory.get_recent_history('image', event_count)\n                        reasonings = self.memory.get_recent_history('decision_making_reasoning', event_count)"
        },
        {
            "comment": "The code constructs a list of image introductions with paths, assistant responses, and format descriptions. It then assigns this list to the input dictionary along with other relevant information. The code calls the planner's information_summary function with the input dictionary and stores the summary result and entities/behaviors in variables for further use. Finally, it logs the summary and entities/behaviors results and adds the summary to the memory.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/agent/agent.py\":245-257",
            "content": "                        image_introduction = [{\"path\": images[event_i],\"assistant\": \"\",\"introduction\": 'This is the {} screenshot of recent events. The description of this image: {}'.format(['first','second','third','fourth','fifth'][event_i], reasonings[event_i])} for event_i in range(event_count)]\n                        input[\"image_introduction\"] = image_introduction\n                        input[\"previous_summarization\"] = self.memory.get_summarization()\n                        input[\"task_description\"] = sub_task_description\n                        input[\"event_count\"] = str(event_count)\n                        data = self.planner.information_summary(input = input)\n                        info_summary = data['res_dict']['info_summary']\n                        entities_and_behaviors = data['res_dict']['entities_and_behaviors']\n                        logger.write(f'R: Summary: {info_summary}')\n                        logger.write(f'R: Entities and behaviors: {entities_and_behaviors}')\n                        self.memory.add_summarization(info_summary)"
        },
        {
            "comment": "The code snippet is part of a task agent's logic. It prepares success detection, checks if the task was successful, and logs relevant information such as success criteria and reasoning. If successful, it exits back to pause mode and increments the sub-task index for the next iteration.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/agent/agent.py\":258-282",
            "content": "                # summarization ends\n                # Prepare success detection\n                logger.write(f'> Success detection call...')\n                data = self.planner.success_detection(input=success_detection_args(self.planner, self.memory))\n                # Check success\n                success = data['res_dict']['success']\n                success_reasoning = data['res_dict']['reasoning']\n                success_criteria = data['res_dict']['criteria']\n                self.memory.add_recent_history(\"success_detection_reasoning\", success_reasoning)\n                logger.write(f'R: Success: {success}')\n                logger.write(f'R: Success criteria: {success_criteria}')\n                logger.write(f'R: Success reason: {success_reasoning}')\n                # @TODO represent new state for next loop\n                if success:\n                    self.gm.exit_back_to_pause()\n                    logger.write(f'Finished sub-task: {current_sub_task}')\n                    sub_task_index += 1\n                    if sub_task_index >= len(decomposed_task_steps):"
        },
        {
            "comment": "Finished task log and move to next subtask (30-307); exception handling for KeyboardInterrupt, exits program with cleanup (283-307). Pauses if non-paused skill executed, warns logger (paused_skills defined in 313-315).",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/agent/agent.py\":283-307",
            "content": "                        logger.write(f'Finished task: {main_task_description}!!!')\n                        break\n                    else:\n                        # Move to the next subtask with the appropriate configs\n                        current_sub_task = decomposed_task_steps[sub_task_index]\n                        logger.write(f'New sub-task: {current_sub_task}')\n                # @TODO re-use post-action image for info gathering?\n                logger.write() #end of loop\n            except KeyboardInterrupt:\n                logger.write('KeyboardInterrupt Ctrl+C detected, exiting.')\n                self.gm.cleanup_io()\n                break\n    def pause_if_needed(self, last_executed_skill: str):\n        paused_skills = trade_skills + buy_skills + map_skills\n        to_remove = [\"close_map\", \"cancel_shopkeeper_interaction\"]\n        for e in to_remove:\n            paused_skills.remove(e)\n        if last_executed_skill not in paused_skills:\n            logger.warn(f\"!! Pausing after skill: {last_executed_skill} !!\")"
        },
        {
            "comment": "Pauses the game if it's not already paused, otherwise logs a warning for skipping pause due to an ongoing skill execution.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/agent/agent.py\":308-310",
            "content": "            self.gm.pause_game()\n        else:\n            logger.warn(f\"!! Skipping pause for skill: {last_executed_skill} !!\")"
        }
    ]
}