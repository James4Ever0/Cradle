{
    "summary": "The code introduces `ConversationUnit` and `ConversationMemory` classes for managing conversation memory in chat applications. It utilizes vector stores for data retrieval, performs similarity search, embeds queries, adds embeddings to vector stores, and handles saving/loading memory.",
    "details": [
        {
            "comment": "The code defines a `ConversationUnit` class with `messages` and `response` attributes, representing a basic unit of memory. It also includes an `__iter__` method to iterate over the fields of the class. This class is used in conversation-based applications for storing input messages and system responses.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/memory/short_term_memory.py\":0-48",
            "content": "from typing import (\n    List,\n    Dict,\n    Union,\n    Optional,\n)\nfrom dataclasses import dataclass, fields\nimport time\nimport json\nimport os\nfrom cradle.config import Config\nfrom cradle.log import Logger\nfrom cradle.provider.base_embedding import EmbeddingProvider\nfrom cradle.memory.base import BaseMemory, Image\nfrom cradle.memory import VectorStore\ncfg = Config()\nlogger = Logger()\n@dataclass\nclass ConversationUnit:\n    \"\"\"A basic unit of memory.\n    Attributes:\n        messages: The messages of the conversation input.\n        response: The response of the language model.\n    Example Usage:\n        mu = MemoryUnit(\n            messages=[\n                {\n                    \"role\": \"user\",\n                    \"text\": \"Hello, I am a user.\",\n                },\n            ],\n            response={\n                \"role\": \"system\",\n                \"text\": \"Hello, I am a system.\",\n            },\n        )\n    \"\"\"\n    messages: str\n    response: str\n    def __iter__(self):\n        for field in fields(self):\n            value = getattr(self, field.name)"
        },
        {
            "comment": "The code snippet represents a memory class named ConversationMemory, which inherits from BaseMemory. It initializes the memory (a dictionary) if it's None or updates it with existing data. The add method allows adding conversation messages and responses to this memory. A unique name is assigned based on current timestamp while creating a new ConversationUnit object.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/memory/short_term_memory.py\":49-82",
            "content": "            yield field.name, value\nclass ConversationMemory(BaseMemory):\n    def __init__(\n        self,\n        memory_path: str,\n        vectorstores: Dict[str, VectorStore],\n        embedding_provider: EmbeddingProvider,\n        memory: Optional[Dict] = None,\n    ) -> None:\n        if memory is None:\n            self.memory: Dict[str, ConversationUnit] = {}\n        else:\n            self.memory = memory\n        self.memory_path = memory_path\n        self.vectorstores = vectorstores\n        self.embedding_provider = embedding_provider\n    def add(\n        self,\n        messages: str,\n        response: str,\n        **kwargs,\n    ) -> None:\n        \"\"\"Add data to memory.\n        Args:\n            messages: the messages of the conversation input.\n            response: the response of the language model.\n            **kwargs: Other keyword arguments that subclasses might use.\n        \"\"\"\n        name = time.strftime(\"%Y-%m-%d-%H:%M:%S\", time.localtime())  # the unique id of the added unit.\n        mem_unit = ConversationUnit("
        },
        {
            "comment": "The code defines a class with methods to store and retrieve data, using vector stores for similarity search. It embeds queries, adds embeddings to vector stores, and retrieves corresponding values from memory based on query results.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/memory/short_term_memory.py\":83-115",
            "content": "            messages=messages,\n            response=response,\n        )\n        self.memory[name] = mem_unit\n        embeddings = self.embedding_provider.embed_query(mem_unit.messages)\n        self.vectorstores[\"message\"].add_embeddings([name], [embeddings])\n    def similarity_search(\n        self,\n        query: Union[str, Image],\n        top_k: int = 3,\n        **kwargs,\n    ) -> List[Union[str, Image]]:\n        \"\"\"Retrieve the keys from the vectorstores.\n        Args:\n            query: the query data.\n            top_k: the number of results to return.\n            **kwargs: Other keyword arguments that subclasses might use.\n        Returns:\n            the corresponding values from the memory.\n        \"\"\"\n        query_embedding = self.embedding_provider.embed_query(query)\n        key_and_score = self.vectorstores[\"message\"].similarity_search(query_embedding, top_k)\n        return [self.memory[k] for k, score in key_and_score]\n    def load(\n        cls,\n        memory_path: str,\n        vectorstores: Dict[str, VectorStore],"
        },
        {
            "comment": "This code loads and saves the conversation memory from/to a local file. It uses json to read or write the memory data, and also handles vectorstores saving.",
            "location": "\"/media/root/Prima/works/github_code/Cradle/docs/src/cradle/memory/short_term_memory.py\":116-135",
            "content": "        embedding_provider: EmbeddingProvider,\n    ) -> \"ConversationMemory\":\n        \"\"\"Load the memory from the local file.\"\"\"\n        with open(os.path.join(memory_path, \"memory.json\"), \"r\") as rf:\n            memory = json.load(rf)\n        return cls(\n            memory_path=memory_path,\n            vectorstores=vectorstores,\n            embedding_provider=embedding_provider,\n            memory=memory,\n        )\n    def save(self) -> None:\n        \"\"\"Save the memory to the local file.\"\"\"\n        with open(os.path.join(self.memory_path, \"memory.json\"), \"w\") as f:\n            json.dump(self.memory, f, indent=2)\n        for k, v in self.vectorstores.items():\n            v.save(name=k)"
        }
    ]
}